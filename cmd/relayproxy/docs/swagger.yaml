basePath: /
definitions:
  model.AllFlagRequest:
    properties:
      user:
        $ref: '#/definitions/model.UserRequest'
        description: User The representation of a user for your feature flag system.
    type: object
  model.EvalFlagRequest:
    properties:
      defaultValue:
        description: The value will we use if we are not able to get the variation
          of the flag.
      user:
        $ref: '#/definitions/model.UserRequest'
        description: User The representation of a user for your feature flag system.
    type: object
  model.HealthResponse:
    properties:
      initialized:
        description: Set to true if the HTTP server is started
        example: true
        type: boolean
    type: object
  model.InfoResponse:
    properties:
      cacheRefresh:
        description: This is the last time when your flag file was read and store
          in the internal cache.
        example: "2022-06-13T11:22:55.941628+02:00"
        type: string
    type: object
  model.UserRequest:
    properties:
      anonymous:
        description: Anonymous set if this is a logged-in user or not.
        example: false
        type: boolean
      custom:
        additionalProperties:
          type: string
        description: Custom is a map containing all extra information for this user.
        example:
          company: GO Feature Flag
          email: contact@gofeatureflag.org
          firstname: John
          lastname: Doe
        type: object
      key:
        description: Key is the identifier of the UserRequest.
        example: 08b5ffb7-7109-42f4-a6f2-b85560fbd20f
        type: string
    type: object
  modeldocs.AllFlags:
    description: AllFlags contains the full list of all the flags available for the
      user
    properties:
      flags:
        additionalProperties:
          $ref: '#/definitions/modeldocs.FlagState'
        description: flags is the list of flag for the user.
        type: object
      valid:
        description: '`true` if something went wrong in the relay proxy (flag does
          not exists, ...) and we serve the defaultValue.'
        example: false
        type: boolean
    type: object
  modeldocs.EvalFlagDoc:
    properties:
      errorCode:
        description: Code of the error returned by the server.
        example: ""
        type: string
      failed:
        description: '`true` if something went wrong in the relay proxy (flag does
          not exists, ...) and we serve the defaultValue.'
        example: false
        type: boolean
      reason:
        description: reason why we have returned this value.
        example: TARGETING_MATCH
        type: string
      trackEvents:
        description: '`true` if the event was tracked by the relay proxy.'
        example: true
        type: boolean
      value:
        description: The flag value for this user.
      variationType:
        description: The variation used to give you this value.
        example: variation-A
        type: string
      version:
        description: The version of the flag used.
        example: "1.0"
        type: string
    type: object
  modeldocs.FlagState:
    properties:
      timestamp:
        description: Timestamp is the time when the flag was evaluated.
        example: 1652113076
        type: integer
      trackEvents:
        description: TrackEvents this flag is trackable.
        example: false
        type: boolean
      value:
        description: Value is the flag value, it can be any JSON types.
      variationType:
        description: VariationType is the name of the variation used to have the flag
          value.
        example: variation-A
        type: string
    type: object
  modeldocs.HTTPErrorDoc:
    properties:
      message:
        description: Message of your error
        example: An error occurred
        type: string
    type: object
info:
  contact:
    email: contact@gofeatureflag.org
    name: GO feature flag relay proxy
    url: https://gofeatureflag.org
  description: "# Introduction\n\nThis API is documented in **OpenAPI format** and
    describe the REST API of the **GO Feature Flag relay proxy**.\n\nThe relay proxy
    is a component to evaluate your feature flags remotely when using **GO Feature
    Flag**.  \nThis API is mostly used by all the OpenFeature providers.\n"
  license:
    name: MIT
    url: https://github.com/thomaspoignant/go-feature-flag/blob/main/LICENSE
  title: GO Feature Flag relay proxy endpoints
  x-logo:
    altText: GO Feature Flag logo
    url: https://raw.githubusercontent.com/thomaspoignant/go-feature-flag/main/logo_128.png
paths:
  /health:
    get:
      description: |-
        Making a **GET** request to the URL path `/health` will tell you if the relay proxy is ready to serve traffic.

        This is useful especially for loadbalancer to know that they can send traffic to the service.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HealthResponse'
      summary: Health
  /info:
    get:
      description: |-
        Making a **GET** request to the URL path `/info` will tell give you information about the actual state of the relay proxy.

        As of Today the level of information is small be we can improve this endpoint to returns more information.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.InfoResponse'
      summary: Info
  /v1/allflags:
    post:
      consumes:
      - application/json
      description: |-
        Making a **POST** request to the URL `/v1/allflags` will give you the values of all the flags for
        this user.

        To get a variation you should provide information about the user.
        For that you should provide some user information in JSON in the request body.
      parameters:
      - description: Payload of the user we want to challenge against the flag.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.AllFlagRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/modeldocs.AllFlags'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/modeldocs.HTTPErrorDoc'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/modeldocs.HTTPErrorDoc'
      summary: All flags variations for a user
  /v1/feature/{flag_key}/eval:
    post:
      consumes:
      - application/json
      description: |-
        Making a **POST** request to the URL `/v1/feature/<your_flag_name>/eval` will give you the value of the
        flag for this user.

        To get a variation you should provide information about the user:
        - User information in JSON in the request body.
        - A default value in case there is an error while evaluating the flag.

        Note that you will always have a usable value in the response, you can use the field `failed` to know if
        an issue has occurred during the validation of the flag, in that case the value returned will be the
        default value.
      parameters:
      - description: Payload of the user we want to get all the flags from.
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.EvalFlagRequest'
      - description: Name of your feature flag
        in: path
        name: flag_key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/modeldocs.EvalFlagDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/modeldocs.HTTPErrorDoc'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/modeldocs.HTTPErrorDoc'
      summary: Evaluate a feature flag
swagger: "2.0"
