// Code generated by MockGen. DO NOT EDIT.
// Source: retriever_gc_storage.go

// Package testutils is a generated GoMock package.
package testutils

import (
	context "context"
	reflect "reflect"

	storage "cloud.google.com/go/storage"
	gomock "github.com/golang/mock/gomock"
)

// Mockobject is a mock of object interface.
type Mockobject struct {
	ctrl     *gomock.Controller
	recorder *MockobjectMockRecorder
}

// MockobjectMockRecorder is the mock recorder for Mockobject.
type MockobjectMockRecorder struct {
	mock *Mockobject
}

// NewMockobject creates a new mock instance.
func NewMockobject(ctrl *gomock.Controller) *Mockobject {
	mock := &Mockobject{ctrl: ctrl}
	mock.recorder = &MockobjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockobject) EXPECT() *MockobjectMockRecorder {
	return m.recorder
}

// Attrs mocks base method.
func (m *Mockobject) Attrs(ctx context.Context) (*storage.ObjectAttrs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attrs", ctx)
	ret0, _ := ret[0].(*storage.ObjectAttrs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attrs indicates an expected call of Attrs.
func (mr *MockobjectMockRecorder) Attrs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attrs", reflect.TypeOf((*Mockobject)(nil).Attrs), ctx)
}

// NewReader mocks base method.
func (m *Mockobject) NewReader(ctx context.Context) (*storage.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReader", ctx)
	ret0, _ := ret[0].(*storage.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewReader indicates an expected call of NewReader.
func (mr *MockobjectMockRecorder) NewReader(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReader", reflect.TypeOf((*Mockobject)(nil).NewReader), ctx)
}
