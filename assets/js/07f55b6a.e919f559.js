"use strict";(self.webpackChunkgo_feature_flag_website=self.webpackChunkgo_feature_flag_website||[]).push([[80369],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(96540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}},57996:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"configure_flag/custom-bucketing","title":"\ud83e\udea3 Custom Bucketing","description":"How to bucket users based on a custom identifier","source":"@site/docs/configure_flag/custom-bucketing.md","sourceDirName":"configure_flag","slug":"/configure_flag/custom-bucketing","permalink":"/docs/next/configure_flag/custom-bucketing","draft":false,"unlisted":false,"editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/docs/configure_flag/custom-bucketing.md","tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"sidebar_position":30,"description":"How to bucket users based on a custom identifier"},"sidebar":"tutorialSidebar","previous":{"title":"\ud83c\udfaf Target with Flags","permalink":"/docs/next/configure_flag/target-with-flags"},"next":{"title":"\ud83d\ude80 Rollouts","permalink":"/docs/next/configure_flag/rollout-strategies/"}}');var s=t(74848),a=t(28453);const r={sidebar_position:30,description:"How to bucket users based on a custom identifier"},o="\ud83e\udea3 Custom Bucketing",l={},c=[{value:"Overview",id:"overview",level:2},{value:"How it works",id:"how-it-works",level:2},{value:"Example: Split users based on their team ID",id:"example-split-users-based-on-their-team-id",level:2},{value:"Example: Using nested properties for bucketing",id:"example-using-nested-properties-for-bucketing",level:2}];function u(e){const n={admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"-custom-bucketing",children:"\ud83e\udea3 Custom Bucketing"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["When it comes to splitting the affectation of a flag, the ",(0,s.jsx)(n.code,{children:"targetingKey"})," is usually given a user ID. This key ensures that a user will always be in the same group for each flag."]}),"\n",(0,s.jsxs)(n.p,{children:["But sometimes we want to be sure that a group of users will always be in the same group for each flag.\nThe ",(0,s.jsx)(n.code,{children:"bucketingKey"})," field in the flag configuration allows you to define a different identifier to be used instead of the ",(0,s.jsx)(n.code,{children:"targetingKey"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This enables you to split users based on a custom identifier, such as a team ID, a company ID, or any other attribute that is common to multiple users."}),"\n",(0,s.jsx)(n.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,s.jsxs)(n.p,{children:["When evaluating flags, the ",(0,s.jsx)(n.code,{children:"targetingKey"})," is used to build the hash that will allow GO Feature Flag to affect the user to a variation, if a ",(0,s.jsx)(n.code,{children:"bucketingKey"})," is defined, it will be used instead of the ",(0,s.jsx)(n.code,{children:"targetingKey"}),"."]}),"\n",(0,s.jsx)(n.mermaid,{value:"stateDiagram-v2\n    direction LR\n    Evaluation&nbsp;Context --\x3e Build&nbsp;Hash<br/><sub>(bucketing&nbsp;key&nbsp;+&nbsp;flag&nbsp;name)</sub>\n    Build&nbsp;Hash<br/><sub>(bucketing&nbsp;key&nbsp;+&nbsp;flag&nbsp;name)</sub> --\x3e Affect&nbsp;bucket\n    Affect&nbsp;bucket --\x3e variation&nbsp;1: 10%\n    Affect&nbsp;bucket --\x3e variation&nbsp;2: 40%\n    Affect&nbsp;bucket --\x3e variation&nbsp;3: 50%"}),"\n",(0,s.jsx)(n.p,{children:"Since we are using an attribute that is common to multiple users at the same time, we can ensure that all users with the same attribute will always be in the same group."}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If a value in the corresponding ",(0,s.jsx)(n.code,{children:"bucketingKey"})," is not found in the ",(0,s.jsx)(n.strong,{children:"evaluation context"}),", the flag rules will not be evaluated, and the SDK will return the default value."]}),"\n",(0,s.jsxs)(n.li,{children:["Since the ",(0,s.jsx)(n.code,{children:"bucketingKey"})," is not unique to a user, you can end up with a not uniform distribution of users in the variations depending on the repartition of the ",(0,s.jsx)(n.code,{children:"bucketingKey"})," values."]}),"\n",(0,s.jsxs)(n.li,{children:["The bucketing key must be a ",(0,s.jsx)(n.strong,{children:"string"}),"."]}),"\n"]})}),"\n",(0,s.jsx)(n.h2,{id:"example-split-users-based-on-their-team-id",children:"Example: Split users based on their team ID"}),"\n",(0,s.jsx)(n.p,{children:"Let's say you want to rollout a new feature and be sure that all the members of the same team will receive the same variation."}),"\n",(0,s.jsxs)(n.p,{children:["To achieve this, you can define the ",(0,s.jsx)(n.code,{children:"bucketingKey"})," to be the ",(0,s.jsx)(n.code,{children:"teamId"})," in the flag configuration."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="flag-config.goff.yaml"',children:'scream-level-feature:\n  # highlight-next-line\n  bucketingKey: "teamId"\n  variations:\n    low: "whisper"\n    medium: "talk"\n    high: "scream"\n  defaultRule:\n    percentage:\n      medium: 50\n      high: 50\n'})}),"\n",(0,s.jsxs)(n.p,{children:["With this flag configuration, the ",(0,s.jsx)(n.code,{children:"teamId"})," value will be used for hashing instead of ",(0,s.jsx)(n.code,{children:"targetingKey"}),". The value must be provided to the evaluation context:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",metastring:'title="example.go"',children:'evalCtx := openfeature.NewEvaluationContext(\n    "user-123",\n    map[string]interface{}{\n        "teamId", "f74b72",\n    },\n)\nboolValue, _ := client.BooleanValue("first-flag", false, evalCtx)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["As a result, users who are members of the same team will receive the same flag variation, consistently.",(0,s.jsx)(n.br,{}),"\n","A different ",(0,s.jsx)(n.code,{children:"bucketingKey"})," can be used per experiment, though normally you'll only have a handful of possible values."]}),"\n",(0,s.jsx)(n.h2,{id:"example-using-nested-properties-for-bucketing",children:"Example: Using nested properties for bucketing"}),"\n",(0,s.jsx)(n.p,{children:"GO Feature Flag supports dot notation for accessing nested properties in your evaluation context. This is particularly useful when your context has a hierarchical structure."}),"\n",(0,s.jsxs)(n.p,{children:["For instance, if you want to bucket users based on their company ID, which is nested inside a ",(0,s.jsx)(n.code,{children:"company"})," object:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="flag-config.goff.yaml"',children:'premium-feature:\n  # highlight-next-line\n  bucketingKey: "company.id"\n  variations:\n    enabled: true\n    disabled: false\n  defaultRule:\n    percentage:\n      enabled: 20\n      disabled: 80\n'})}),"\n",(0,s.jsx)(n.p,{children:"The evaluation context should include the nested structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",metastring:'title="example.go"',children:'evalCtx := openfeature.NewEvaluationContext(\n    "user-456",\n    map[string]interface{}{\n        "company": map[string]interface{}{\n            "id":   "company-789",\n            "name": "GO Feature Flag",\n            "tier": "enterprise",\n        },\n    },\n)\nboolValue, _ := client.BooleanValue("premium-feature", false, evalCtx)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, all users from the same company will receive the same feature variation because the bucketing is based on ",(0,s.jsx)(n.code,{children:"company.id"}),"."]}),"\n",(0,s.jsx)(n.admonition,{title:"Deep nesting",type:"tip",children:(0,s.jsxs)(n.p,{children:["You can use multiple levels of nesting, such as ",(0,s.jsx)(n.code,{children:"user.profile.role"})," or ",(0,s.jsx)(n.code,{children:"organization.settings.region"}),", allowing for flexible bucketing strategies based on your data structure."]})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);