"use strict";(self.webpackChunkgo_feature_flag_website=self.webpackChunkgo_feature_flag_website||[]).push([[48130],{77735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2025/10/03/grafana-using-go-feature-flag","metadata":{"permalink":"/blog/2025/10/03/grafana-using-go-feature-flag","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2025-10-03-grafana-using-go-feature-flag/index.md","source":"@site/blog/2025-10-03-grafana-using-go-feature-flag/index.md","title":"Grafana is Now Using GO Feature Flag \ud83c\udf89","description":"We\u2019re proud to announce that Grafana, one of the world\u2019s most popular observability platforms, is now using GO Feature Flag as a dependency in their project! \ud83d\ude80","date":"2025-10-03T00:00:00.000Z","tags":[{"inline":true,"label":"grafana","permalink":"/blog/tags/grafana"},{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":1.07,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"title":"Grafana is Now Using GO Feature Flag \ud83c\udf89","authors":["thomaspoignant"],"tags":["grafana","announcement"],"image":"https://gofeatureflag.org/assets/images/grafana-go-feature-flag-8b3765aa4fe3e4debecb26f203bfd4cc.png"},"unlisted":false,"nextItem":{"title":"\ud83c\udfd7\ufe0f Introducing Flag Sets: Organize Your Feature Flags Like Never Before","permalink":"/blog/2025/09/18/introducing-flagsets"}},"content":"We\u2019re proud to announce that [**Grafana**](https://github.com/grafana/grafana), one of the world\u2019s most popular observability platforms, is now using **[GO Feature Flag](https://gofeatureflag.org)** as a dependency in their project! \ud83d\ude80\\n\\n![Grafana using GO Feature Flag](./grafana-go-feature-flag.png)\\n_(Screenshot from Grafana\u2019s `go.mod` file showing GO Feature Flag)_\\n\\nThis is a huge milestone for us. Grafana is one of the most widely used observability platforms in the world, relied upon by countless developers and organizations to monitor and visualize their systems. Seeing such a respected open-source project adopt **GO Feature Flag** is a strong validation of the reliability, performance, and simplicity of our solution.\\n\\nA big thank you to our community and contributors for making this possible \u2014 and to the Grafana team for trusting our solution. \u2764\ufe0f\\n\\nHere\u2019s to safer rollouts, faster innovation, and more great open-source collaborations ahead! \ud83d\ude80\\n\\nWe\u2019re incredibly proud of this milestone, but it\u2019s only the beginning. GO Feature Flag continues to evolve, and we\u2019re committed to making it even easier for teams of all sizes to roll out new features with confidence.\\n\\nIf you\u2019re curious about how GO Feature Flag can fit into your projects, check out our [ documentation](https://gofeatureflag.org/docs/) or join our [community](https://gofeatureflag.org/slack/). We\u2019d love to hear from you!\\n\\n\x3c!-- truncate --\x3e"},{"id":"/2025/09/18/introducing-flagsets","metadata":{"permalink":"/blog/2025/09/18/introducing-flagsets","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2025-09-18-introducing-flagsets/index.md","source":"@site/blog/2025-09-18-introducing-flagsets/index.md","title":"\ud83c\udfd7\ufe0f Introducing Flag Sets: Organize Your Feature Flags Like Never Before","description":"Discover how GO Feature Flag\'s new flag sets feature enables better organization, team isolation, and multi-tenant support for your feature flag management.","date":"2025-09-18T00:00:00.000Z","tags":[{"inline":true,"label":"feature flags","permalink":"/blog/tags/feature-flags"},{"inline":true,"label":"flagsets","permalink":"/blog/tags/flagsets"},{"inline":true,"label":"organization","permalink":"/blog/tags/organization"},{"inline":true,"label":"multi-tenant","permalink":"/blog/tags/multi-tenant"},{"inline":true,"label":"team isolation","permalink":"/blog/tags/team-isolation"}],"readingTime":4.78,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"title":"\ud83c\udfd7\ufe0f Introducing Flag Sets: Organize Your Feature Flags Like Never Before","description":"Discover how GO Feature Flag\'s new flag sets feature enables better organization, team isolation, and multi-tenant support for your feature flag management.","authors":["thomaspoignant"],"tags":["feature flags","flagsets","organization","multi-tenant","team isolation"],"image":"https://gofeatureflag.org/assets/images/flagsets-675cab0cd5849897717d6ae6474521fb.jpg"},"unlisted":false,"prevItem":{"title":"Grafana is Now Using GO Feature Flag \ud83c\udf89","permalink":"/blog/2025/10/03/grafana-using-go-feature-flag"},"nextItem":{"title":"Watch Thomas\'s PlatformCon 2025 Talk on Feature Flag Decoupling","permalink":"/blog/2025/07/01/platformcon-2025-talk"}},"content":"![Flag Sets Banner](flagsets.jpg)\\n\\n# \ud83c\udfd7\ufe0f Introducing Flag Sets: Organize Your Feature Flags Like Never Before\\n\\nWe\'re excited to announce that we have released one of the most requested feature for GO Feature Flag.  \\nIt will revolutionize how you organize and manage your feature flags: **Flag Sets**! \ud83c\udf89\\n\\nAs your applications grow and teams expand, managing feature flags can become increasingly complex. Different teams need their own flags, environments require separate configurations, and multi-tenant applications demand isolated flag management. That\'s exactly what Flag Sets are designed to solve.\\n\\n\x3c!--truncate--\x3e\\n\\n## \ud83e\udd14 What Are Flag Sets?\\n\\n---\\n\\nFlag Sets are a powerful organizational feature in GO Feature Flag that allows you to group related feature flags into separate, isolated collections. Each flag set operates independently with its own:\\n\\n- **Configuration**: Retrievers, exporters, and notifiers\\n- **API Keys**: Secure access control with dedicated authentication\\n- **Flag Management**: Complete isolation from other flag sets\\n- **Data Tracking**: Separate evaluation data and analytics\\n\\nThink of flag sets as **\\"virtual feature flag environments\\"** within your single GO Feature Flag relay proxy instance.  \\nThey provide the organizational benefits of multiple instances while maintaining the simplicity of a single deployment.\\n\\n## \u2728 What are the benefits of flag sets?\\n\\n---\\n\\n### \ud83c\udfe2 **Team Isolation**\\n\\nIn modern software development, different teams often need to manage their own feature flags independently. With flag sets, you can:\\n\\n- **Team A**: Manage application A feature flags: `new-navigation`, `dark-mode`, `responsive-design`.\\n- **Team B**: Manage application A feature flags: `new-payment-api`, `caching-strategy`, `rate-limiting`, `dark-mode`.\\n- ...\\n\\nEach team gets their own isolated environment without interfering with others.\\n\\n- You can have the same feature flag name with a different configuration.\\n- Team A cannot access to Team B feature flags.\\n- Each flag set can have a dedicated exporter.\\n- Each flag set can notify flag changes in a different place.\\n\\n### \ud83c\udfd8\ufe0f **Multi-Tenant Applications**\\n\\nFor applications serving multiple customers or organizations, flag sets provide perfect isolation:\\n\\n- Each customer gets their own flag set.\\n- No risk of flag name collisions between customers.\\n- Isolated configurations and data tracking.\\n- Secure access control per customer.\\n- Routing to the flag set is based on API Keys.\\n\\n## \u2699\ufe0f How Flag Sets Work\\n\\n---\\n\\n### Configuration Structure\\n\\nFlag sets are configured in your relay proxy configuration file, instead of defining your configuration on top level of the file we have introduce a new field called flagset.\\n\\nIn each flag set you can configure his behavior like in this example:\\n\\n```yaml\\nlisten: 1031\\nflagsets:\\n  - name: team-a\\n    apiKeys:\\n      - \'team-a-api-key-1\'\\n      - \'team-a-api-key-2\'\\n    retrievers:\\n      - kind: file\\n        path: /flags/team-a-flags.yaml\\n    exporters:\\n      - kind: s3\\n        bucket: team-a-evaluations\\n    notifiers:\\n      - kind: slack\\n        webhookUrl: \'https://hooks.slack.com/services/team-a-webhook\'\\n\\n  - name: team-b\\n    apiKeys:\\n      - \'team-b-api-key\'\\n    retrievers:\\n      - kind: github\\n        repository: my-org/team-b-flags\\n        path: flags.yaml\\n    exporters:\\n      - kind: kafka\\n        topic: team-b-evaluations\\n    notifiers:\\n      - kind: discord\\n        webhookUrl: \'https://discord.com/api/webhooks/team-b-webhook\'\\n\\n  - name: team-c\\n    apiKeys:\\n      - \'team-c-api-key\'\\n    retrievers:\\n      - kind: s3\\n        bucket: team-b-feature-flags\\n        item: flags.yaml\\n    exporters:\\n      - kind: file\\n        outputDir: /logs/team-c-evaluations\\n    pollingInterval: 1000\\n```\\n\\nAs you can see, you are able to configure every flag sets differently.\\n\\n### API Key-Based Routing\\n\\nThe magic of flag sets lies in their API key-based routing system:\\n\\n1. **Extract API Key**: The relay proxy extracts the API key from the `Authorization` header.\\n1. **Find Flag Set**: It looks up which flag set is associated with that API key.\\n1. **Route Request**: The evaluation request is routed to that specific flag set.\\n1. **Return Result**: The evaluation result comes from that flag set\'s flags.\\n\\nThis means you can have identical flag names across different flag sets without any conflicts \u2728.\\n\\n### OpenFeature Provider Integration\\n\\nUsing flag sets in your applications is straightforward. You simply initialize your providers with the correct API key.  \\nAll the providers have a way to pass the API Key to use, based on this one the relay proxy will route the request to the correct flag set.\\n\\n## Key Benefits of using flag sets\\n\\n---\\n\\n### \ud83d\udd12 **Complete Isolation**\\n\\n- No inheritance between flag sets\\n- Identical flag names can exist across different sets\\n- Independent configurations and data tracking\\n\\n### \ud83d\udd11 **Secure Access Control**\\n\\n- API key-based authentication for each flag set\\n- Multiple API keys per flag set for flexibility\\n- No cross-contamination between teams or customers\\n\\n### \ud83c\udfaf **Flexible Configuration**\\n\\n- Each flag set can have its own retrievers, exporters, and notifiers\\n- Independent polling intervals and file formats\\n- Custom notification channels per team\\n\\n### \ud83d\udcca **Separate Analytics**\\n\\n- Evaluation data is tracked separately per flag set\\n- Independent export configurations\\n- Team-specific monitoring and alerting\\n\\n## Migration Guide\\n\\n---\\n\\nIf you\'re currently using a single GO Feature Flag configuration, migrating to flag sets is straightforward:\\n\\n### Option 1: Gradual Migration\\n\\n1. Ensure that all your providers are using API Keys to connect to GO Feature Flag.\\n2. Create a flag set and move your actual configuration inside it.\\n3. Associate your API Keys to the flag set.\\n4. Create extra flag sets and move flags over them.\\n5. Change the API Key used in your provider to point to the right flag set.\\n\\n### Option 2: Full Migration\\n\\n1. Create flag sets for each team or purpose.\\n2. Move all flags to appropriate flag sets.\\n3. Update all applications with new API keys.\\n4. Remove the old single configuration.\\n\\n## Get Started Today\\n\\nFlag Sets are available now in GO Feature Flag! Whether you\'re managing multiple teams, serving multiple customers, or just want better organization, flag sets provide the flexibility and isolation you need.\\n\\n### Resources\\n\\n- \ud83d\udcda [Flag Sets Documentation](https://docs.gofeatureflag.org/concepts/flagset)\\n- \ud83d\udd27 [Configuration Guide](https://docs.gofeatureflag.org/relay-proxy/configure-relay-proxy#use-multiple-flag-sets)\\n- \ud83d\udcac [Community Discussions](https://gofeatureflag.org/slack)\\n- \ud83d\udc1b [Report Issues](https://github.com/thomaspoignant/go-feature-flag/issues)\\n\\nWe can\'t wait to see how you use Flag Sets to organize and scale your feature flag management! And please share your feedbacks ! \ud83d\ude80"},{"id":"/2025/07/01/platformcon-2025-talk","metadata":{"permalink":"/blog/2025/07/01/platformcon-2025-talk","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2025-07-01-platformcon-2025-talk/index.md","source":"@site/blog/2025-07-01-platformcon-2025-talk/index.md","title":"Watch Thomas\'s PlatformCon 2025 Talk on Feature Flag Decoupling","description":"Thomas Poignant presents \\"Decouple Deployments and Releases with OpenFeature\\" at PlatformCon 2025, exploring how to separate feature releases from code deployments using feature flags and OpenFeature.","date":"2025-07-01T00:00:00.000Z","tags":[{"inline":true,"label":"platformcon","permalink":"/blog/tags/platformcon"},{"inline":true,"label":"openfeature","permalink":"/blog/tags/openfeature"},{"inline":true,"label":"feature flags","permalink":"/blog/tags/feature-flags"},{"inline":true,"label":"deployment","permalink":"/blog/tags/deployment"},{"inline":true,"label":"release management","permalink":"/blog/tags/release-management"}],"readingTime":1.97,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"title":"Watch Thomas\'s PlatformCon 2025 Talk on Feature Flag Decoupling","description":"Thomas Poignant presents \\"Decouple Deployments and Releases with OpenFeature\\" at PlatformCon 2025, exploring how to separate feature releases from code deployments using feature flags and OpenFeature.","authors":["thomaspoignant"],"tags":["platformcon","openfeature","feature flags","deployment","release management"]},"unlisted":false,"prevItem":{"title":"\ud83c\udfd7\ufe0f Introducing Flag Sets: Organize Your Feature Flags Like Never Before","permalink":"/blog/2025/09/18/introducing-flagsets"},"nextItem":{"title":"Introducing Exporter Metadata in the GO Feature Flag Provider for OpenFeature.","permalink":"/blog/2025/01/21/exporter-metadata"}},"content":"We\'re excited to share that Thomas Poignant, creator of GO Feature Flag, presented an insightful talk at **PlatformCon 2025** about decoupling deployments from feature releases using OpenFeature.\\n\\n<iframe width=\\"100%\\" height=\\"444\\" src=\\"https://www.youtube.com/embed/mPHlhMkuH9c\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\n## Talk: \\"Decouple Deployments and Releases with OpenFeature\\"\\n\\nIn this presentation, Thomas explores how traditional deployment strategies often directly couple feature releases with code deployments, increasing risks and slowing time-to-market. He demonstrates how **OpenFeature**, a vendor-agnostic API for feature flagging, enables developers to separate feature releases from code deployments, providing precise control over feature visibility and experimentation.\\n\\n\x3c!--truncate--\x3e\\n\\n## What You\'ll Learn\\n\\nThe talk covers several key concepts:\\n\\n- **Fundamental feature flagging concepts** and how they transform development workflows\\n- **OpenFeature integration** and how it simplifies feature flag management across different providers\\n- **Real-world use cases** demonstrating the practical benefits of deployment/release decoupling\\n- **Best practices** for implementing feature flags effectively in development workflows\\n- **Risk reduction strategies** for safer and more controlled feature rollouts\\n\\n## Why This Matters\\n\\nIn today\'s fast-paced development environment, the ability to deploy code without immediately releasing features to users has become crucial for:\\n\\n- **Reducing deployment risks** by allowing features to be tested in production before user exposure\\n- **Faster time-to-market** through independent deployment and release cycles\\n- **Enhanced experimentation capabilities** with controlled feature rollouts\\n- **Improved incident response** with the ability to quickly disable problematic features\\n\\n## About PlatformCon 2025\\n\\nPlatformCon is the premier conference for platform engineering, bringing together industry experts to share insights on building and scaling development platforms. Thomas\'s talk was part of the conference\'s focus on modern development practices and tooling that enable engineering teams to ship software more effectively.\\n\\n## Learn More About GO Feature Flag\\n\\nIf you\'re interested in implementing feature flags in your own projects, check out:\\n\\n- **[GO Feature Flag Documentation](https://gofeatureflag.org/docs/getting-started)** - Get started with our open-source feature flag solution\\n- **[OpenFeature Integration](https://gofeatureflag.org/docs/sdk)** - Learn how to use GO Feature Flag with OpenFeature\\n- **[Best Practices Guide](https://gofeatureflag.org/docs/concepts/flag-evaluation)** - Understand how to implement feature flags effectively\\n\\n---\\n\\nHave questions about feature flagging or want to share your own experiences? Join our community discussions or reach out to Thomas on [GitHub](https://github.com/thomaspoignant) or [LinkedIn](https://www.linkedin.com/in/poignantthomas/)."},{"id":"/2025/01/21/exporter-metadata","metadata":{"permalink":"/blog/2025/01/21/exporter-metadata","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2025-01-21-exporter-metadata/index.md","source":"@site/blog/2025-01-21-exporter-metadata/index.md","title":"Introducing Exporter Metadata in the GO Feature Flag Provider for OpenFeature.","description":"Exporter metadata in the GO Feature Flag provider for OpenFeature allows enriching evaluation events with static context data like environment or app version for improved observability and analysis.","date":"2025-01-21T00:00:00.000Z","tags":[{"inline":true,"label":"openfeature","permalink":"/blog/tags/openfeature"},{"inline":true,"label":"exporter","permalink":"/blog/tags/exporter"}],"readingTime":2.85,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"title":"Introducing Exporter Metadata in the GO Feature Flag Provider for OpenFeature.","description":"Exporter metadata in the GO Feature Flag provider for OpenFeature allows enriching evaluation events with static context data like environment or app version for improved observability and analysis.","authors":["thomaspoignant"],"tags":["openfeature","exporter"]},"unlisted":false,"prevItem":{"title":"Watch Thomas\'s PlatformCon 2025 Talk on Feature Flag Decoupling","permalink":"/blog/2025/07/01/platformcon-2025-talk"},"nextItem":{"title":"(Java) OpenFeature provider improve the internal cache management.","permalink":"/blog/2024/10/20/breaking-change-java"}},"content":"This blog post dives into a new functionality introduced in the GO Feature Flag provider for OpenFeature: exporter metadata. We\'ll explore how it works and how you can leverage it to enrich your evaluation events with valuable static information.\\n\\n## What is Exporter Metadata?\\nExporter metadata is an object you can configure when initializing your GO Feature Flag provider for OpenFeature.\\n\\nIt allows you to specify a set of static information that you want to consistently include with all your evaluation events.\\nA good example of information you might include in exporter metadata is the environment in which your application is running,\\nthe version of the application or anything that helps you when you analyze your evaluation data.\\n\\nThis data is then forwarded to the exporter and incorporated into your feature events as a new field called `metadata`.\\n\x3c!--truncate--\x3e\\n## Why Use Exporter Metadata?\\n\\nIncluding exporter metadata in your evaluation events offers several advantages:\\n- **Enhanced Context**: By adding static information to your events, you can provide richer context for analysis. This can include details about the environment (e.g., development, staging, production), the application version, or any other relevant data that sheds light on feature usage patterns.\\n- **Improved Observability**: With exporter metadata, you gain a more comprehensive view of feature evaluation across different contexts. This can be particularly useful for debugging purposes or identifying trends in feature adoption for specific environments or application versions.\\n- **Simplified Data Enrichment**: Exporter metadata eliminates the need to manually inject context information into every evaluation event. This streamlines your code and ensures consistency in the data you collect.\\n\\n## How to Use Exporter Metadata\\n\\nIn all providers that support exporter metadata, you can pass a map of key-value pairs to the `ExporterMetadata` field in the provider\'s configuration.\\nValue can be a `string`, a `bool`, an `int` or a `float64`.\\n\\nThis map will be included in all evaluation events sent to the exporter and added to the `metadata` field by the exporter.\\n\\nHere\'s an example of how you can configure exporter metadata in the Kotlin provider:\\n```kotlin\\nval options =\\n    GoFeatureFlagOptions(\\n        endpoint = \\"https://mygoffserver.com/\\",\\n        exporterMetadata = mapOf(\\"device\\" to \\"Pixel 4\\", \\"appVersion\\" to \\"1.0.0\\")\\n    )\\n\\nval provider = GoFeatureFlagProvider(options)\\n```\\nIn this example, we\'re passing some information that can help to understand the context of the evaluation events such as the device type and the appVersion.\\n\\nWith this configuration, all evaluation events sent to the exporter will include the `metadata` field with the specified key-value pairs.\\nAnd it will look like this:\\n\\n```json\\n{\\"kind\\":\\"feature\\",\\"contextKind\\":\\"user\\",\\"userKey\\":\\"4f433951-4c8c-42b3-9f18-8c9a5ed8e9eb\\",\\"creationDate\\":1737465936,\\"key\\":\\"REDIRECTION\\",\\"variation\\":\\"on\\",\\"value\\":true,\\"default\\":false,\\"version\\":\\"\\",\\"source\\":\\"PROVIDER_CACHE\\", \\"metadata\\": {\\"device\\": \\"Pixel 4\\", \\"appVersion\\":\\"1.0.0\\", \\"openfeature\\": true, \\"provider\\": \\"android\\"}}\\n```\\n\\n## Which Providers Support Exporter Metadata?\\nTo be able to use exporter metadata, you need to use the relay-proxy in version `v1.41.1` or above and as minimum the following version of the providers:\\n- **Kotlin**: `v0.3.0`\\n- **Web**: `v0.2.4`\\n- **Swift**: `v0.3.0`\\n- **Java**: `v0.4.2`\\n- **NodeJS**: `v0.7.5`\\n- **PHP**: `1.1.0`\\n- **Ruby**: `0.1.3`\\n- **Python**: `v0.4.1`\\n- **.NET**: `0.2.1`\\n- **GO**: `v0.2.3`\\n\\n## Conclusion\\nExporter metadata provides a powerful mechanism to enrich your evaluation events with static information in the GO Feature Flag provider for OpenFeature.\\nBy incorporating this functionality, you can gain deeper insights into feature usage patterns and streamline your data collection process.\\n\\nThis blog post has provided a brief introduction to exporter metadata.\\nWe encourage you to experiment with this feature and explore its potential to enhance your feature flag evaluation practices."},{"id":"/2024/10/20/breaking-change-java","metadata":{"permalink":"/blog/2024/10/20/breaking-change-java","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2024-10-20-breaking-change-java/index.md","source":"@site/blog/2024-10-20-breaking-change-java/index.md","title":"(Java) OpenFeature provider improve the internal cache management.","description":"The Java provider has been updated to improve the internal cache management by migrating from guava cache to caffeine cache.","date":"2024-10-20T00:00:00.000Z","tags":[{"inline":true,"label":"openfeature","permalink":"/blog/tags/openfeature"},{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"breaking changes","permalink":"/blog/tags/breaking-changes"}],"readingTime":1.02,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"title":"(Java) OpenFeature provider improve the internal cache management.","description":"The Java provider has been updated to improve the internal cache management by migrating from guava cache to caffeine cache.","authors":["thomaspoignant"],"tags":["openfeature","java","breaking changes"]},"unlisted":false,"prevItem":{"title":"Introducing Exporter Metadata in the GO Feature Flag Provider for OpenFeature.","permalink":"/blog/2025/01/21/exporter-metadata"},"nextItem":{"title":"Changes to golang OpenFeature Integration","permalink":"/blog/2024/08/14/changes-to-golang-openfeature-integration"}},"content":"Until Today the java provider, used the guava cache to store the flags and the segments.\\nUsing the guava cache is now [discouraged](https://javadoc.io/doc/com.google.guava/guava/latest/com/google/common/cache/package-summary.html) by the guava team.\\n\\nIn order to follow the guidance of the guava team, we have decided to migrate the internal cache of the Java provider from `guava` to `caffeine`.\\n\\nThis may create a **breaking change** for you if you were using a custom cache configuration with the `guava` cache in your provider.  \\nBecause of this, the cache configuration on `GoFeatureFlagProviderOptions` that used Guava\'s `CacheBuilder` is now handled by `Caffeine`.\\n\\n\x3c!--truncate--\x3e\\n## How to migrate\\n\\nConfiguration cache with Guava used to be like this:\\n\\n```java\\nimport com.google.common.cache.CacheBuilder;\\n// ...\\nCacheBuilder guavaCacheBuilder = CacheBuilder.newBuilder()\\n  .initialCapacity(100)\\n  .maximumSize(2000);\\n\\nFeatureProvider provider = new GoFeatureFlagProvider(\\n  GoFeatureFlagProviderOptions\\n  .builder()\\n  .endpoint(\\"https://my-gofeatureflag-instance.org\\")\\n  .cacheBuilder(guavaCacheBuilder)\\n  .build());\\n\\nOpenFeatureAPI.getInstance().setProviderAndWait(provider);\\n\\n// ...\\n```\\n\\nNow with Caffeine it should be like this:\\n\\n```java\\nimport com.github.benmanes.caffeine.cache.Caffeine;\\n// ...\\nCaffeine caffeineCacheConfig = Caffeine.newBuilder()\\n  .initialCapacity(100)\\n  .maximumSize(2000);\\n\\nFeatureProvider provider = new GoFeatureFlagProvider(\\n  GoFeatureFlagProviderOptions\\n  .builder()\\n  .endpoint(\\"https://my-gofeatureflag-instance.org\\")\\n  .cacheConfig(caffeineCacheConfig)\\n  .build());\\n\\nOpenFeatureAPI.getInstance().setProviderAndWait(provider);\\n\\n// ...\\n```\\n\\nFor a complete list of customizations  options available in Caffeine, please refer to the [Caffeine documentation](https://github.com/ben-manes/caffeine/wiki) for more details."},{"id":"/2024/08/14/changes-to-golang-openfeature-integration","metadata":{"permalink":"/blog/2024/08/14/changes-to-golang-openfeature-integration","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2024-08-14-changes-to-golang-openfeature-integration/index.md","source":"@site/blog/2024-08-14-changes-to-golang-openfeature-integration/index.md","title":"Changes to golang OpenFeature Integration","description":"We have released 2 new golang providers for OpenFeature, let\'s explain all the changes.","date":"2024-08-14T00:00:00.000Z","tags":[{"inline":true,"label":"openfeature","permalink":"/blog/tags/openfeature"},{"inline":true,"label":"golang","permalink":"/blog/tags/golang"}],"readingTime":2.52,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"title":"Changes to golang OpenFeature Integration","description":"We have released 2 new golang providers for OpenFeature, let\'s explain all the changes.","authors":["thomaspoignant"],"tags":["openfeature","golang"],"image":"https://gofeatureflag.org/assets/images/blog_cover-551c6a50d204cc3316f7a43ae59625e3.png"},"unlisted":false,"prevItem":{"title":"(Java) OpenFeature provider improve the internal cache management.","permalink":"/blog/2024/10/20/breaking-change-java"},"nextItem":{"title":"Feature Flagging in the SDLC","permalink":"/blog/2024/08/02/feature-flagging-in-the-SDLC"}},"content":"![blog_cover.png](blog_cover.png)\\nWe\'re excited to announce significant improvements to the integration between GO Feature Flag and OpenFeature.\\n\\nTo better serve our users\' diverse needs, we\'ve decided to split the previous Go provider into two distinct providers:\\n- [`go-feature-flag`](https://github.com/open-feature/go-sdk-contrib/tree/main/providers/go-feature-flag): For use with the GO Feature Flag relay proxy.\\n- [`go-feature-flag-in-process`](https://github.com/open-feature/go-sdk-contrib/tree/main/providers/go-feature-flag-in-process): For direct integration of GO Feature Flag into your application.\\n\\n\x3c!--truncate--\x3e\\n\\n## Why the Split?\\n\\nThe decision to create separate providers was driven by several factors:\\n- **Distinct Use Cases:** It\'s uncommon for users to require both the relay proxy and in-process capabilities simultaneously.\\n- **Dependency Management:** The in-process provider introduces additional dependencies, which can complicate integration.\\n- **Maintainability:** Managing two distinct functionalities within a single provider proved challenging.\\n\\nBy separating these functionalities, we\'ve streamlined the integration process and enhanced overall maintainability.\\n\\nWe also use this split to rewrite from scratch the provider to increase the quality of the OpenFeature integration.\\n\\n## Choosing the Right Provider\\n\\nTo select the appropriate provider for your application, consider the following:\\n- [`go-feature-flag`](https://github.com/open-feature/go-sdk-contrib/tree/main/providers/go-feature-flag): Ideal for multi-language environments using the GO Feature Flag relay proxy. This provider offers a lightweight integration with minimal dependencies, ensuring consistency with other language-specific providers.\\n- [`go-feature-flag-in-process`](https://github.com/open-feature/go-sdk-contrib/tree/main/providers/go-feature-flag-in-process): Best suited for Go-only applications that prefer a direct integration without the overhead of a separate service.\\n\\n## Breaking Changes\\nAs you may imagine, this split comes with some breaking changes, but we\'ve done everything possible to limit it as much as possible.\\nPlease be aware of the following breaking changes:\\n\\n- **Existing go-feature-flag users:** If you were previously using the `go-feature-flag` provider with the Go module, you\'ll need to transition to the `go-feature-flag-in-process` provider.\\n- **Configuration Changes:** The `HTTPClient` interface has been removed from the configuration in favor of using the standard `http.Client` _(This should have no impact on the way to pass the http client in the options)_. \\n- **Cache Compatibility:** If you are using the in-memory cache of the provider, ensure your relay proxy is updated to version `1.32.0` or later, if not the cache will not work as expected and you may have an increase on the number of connection to the relay-proxy.\\n\\nWe understand that these changes may require adjustments to your existing setup. We recommend carefully reviewing the updated documentation for both providers to ensure a smooth transition.\\n\\n## Next Steps\\n\\nWe encourage you to explore the new providers and leverage the enhanced features they offer. If you encounter any issues or have feedback, please don\'t hesitate to [open an issue](https://github.com/thomaspoignant/go-feature-flag/issues/new/choose).\\n\\nWe\'re committed to providing you with the best possible feature flagging experience."},{"id":"/2024/08/02/feature-flagging-in-the-SDLC","metadata":{"permalink":"/blog/2024/08/02/feature-flagging-in-the-SDLC","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2024-08-02-feature-flagging-in-the-SDLC/index.md","source":"@site/blog/2024-08-02-feature-flagging-in-the-SDLC/index.md","title":"Feature Flagging in the SDLC","description":"Feature Flagging in the Software Development Lifecycle - Follow the life of a feature flag from birth to retirement.","date":"2024-08-02T00:00:00.000Z","tags":[{"inline":true,"label":"openfeature","permalink":"/blog/tags/openfeature"},{"inline":true,"label":"SDLC","permalink":"/blog/tags/sdlc"},{"inline":true,"label":"Slides","permalink":"/blog/tags/slides"},{"inline":true,"label":"Presentation","permalink":"/blog/tags/presentation"}],"readingTime":0.83,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"title":"Feature Flagging in the SDLC","description":"Feature Flagging in the Software Development Lifecycle - Follow the life of a feature flag from birth to retirement.","authors":["thomaspoignant"],"tags":["openfeature","SDLC","Slides","Presentation"]},"unlisted":false,"prevItem":{"title":"Changes to golang OpenFeature Integration","permalink":"/blog/2024/08/14/changes-to-golang-openfeature-integration"},"nextItem":{"title":"GO Feature Flag: Now Powering Your Mobile App Experience","permalink":"/blog/2024/07/25/go-feature-flag-mobile-support"}},"content":"**Thomas** recently delivered a presentation on Feature Flagging in the Software Development Lifecycle (SDLC) for OpenFeature. Given the presentation\'s public availability, we are pleased to share the slides with you.\\n\\nEffective management of the feature flag lifecycle is crucial for maximizing the value of feature flags within an organization.\\n\\nThis presentation is covering the following key areas:\\n- **Feature flag lifecycle:** Understanding the complete journey of a feature flag.\\n- **Roles and responsibilities:** Identifying who owns each phase of the lifecycle.\\n- **Feature flag naming conventions:** Best practices for clear and consistent flag identification.\\n- **Preventing flag debt:** Strategies for avoiding the accumulation of unused or obsolete flags.\\n- **Involving project managers:** The importance of project management collaboration in feature flag initiatives.\\n\\nBy understanding these concepts, you can optimize your feature flagging strategy and drive business success.\\n\\n<iframe src=\\"https://docs.google.com/presentation/d/e/2PACX-1vSt-lZkiFpntGRWB-FZ0IFMFZlWrd6kk1tjjNrh1r4oDn19C32-lFGq4qxFZbfQmaSf6MUnTZJyAtsT/embed?start=false&loop=false&delayms=3000\\" frameborder=\\"0\\" width=\\"960\\" height=\\"569\\" allowfullscreen=\\"true\\" mozallowfullscreen=\\"true\\" webkitallowfullscreen=\\"true\\"></iframe>\\n\x3c!-- truncate --\x3e"},{"id":"/2024/07/25/go-feature-flag-mobile-support","metadata":{"permalink":"/blog/2024/07/25/go-feature-flag-mobile-support","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2024-07-25-go-feature-flag-mobile-support/index.mdx","source":"@site/blog/2024-07-25-go-feature-flag-mobile-support/index.mdx","title":"GO Feature Flag: Now Powering Your Mobile App Experience","description":"GO Feature Flag: Now Powering Your Mobile App Experience.","date":"2024-07-25T00:00:00.000Z","tags":[{"inline":true,"label":"openfeature","permalink":"/blog/tags/openfeature"},{"inline":true,"label":"mobile","permalink":"/blog/tags/mobile"},{"inline":true,"label":"ios","permalink":"/blog/tags/ios"},{"inline":true,"label":"android","permalink":"/blog/tags/android"},{"inline":true,"label":"react-native","permalink":"/blog/tags/react-native"}],"readingTime":3.02,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"title":"GO Feature Flag: Now Powering Your Mobile App Experience","description":"GO Feature Flag: Now Powering Your Mobile App Experience.","authors":["thomaspoignant"],"tags":["openfeature","mobile","ios","android","react-native"],"image":"https://gofeatureflag.org/assets/images/mobile-support-bdc8b741188a4d89ecd5cf6382336690.png"},"unlisted":false,"prevItem":{"title":"Feature Flagging in the SDLC","permalink":"/blog/2024/08/02/feature-flagging-in-the-SDLC"},"nextItem":{"title":"GO Feature Flag Supports OpenFeature Remote Evaluation Protocol (OFREP)!","permalink":"/blog/2024/03/13/ofrep"}},"content":"We\'re thrilled to announce a major milestone for GO Feature Flag: **full compatibility with mobile applications**.\\nThat\'s right, you can now leverage the power of feature flags to optimize your iOS, Android, and React Native apps with unparalleled ease and flexibility.\\n\\n![GO Feature Flag: Now Powering Your Mobile App Experience](mobile-support.png)\\n\\n\x3c!--truncate--\x3e\\n\\n## Why Mobile Feature Flags Matter?\\n\\nMobile app development is a fast-paced world where agility is key. Traditional release cycles can be lengthy and risky. Feature flags provide a dynamic solution by allowing you to control feature visibility without redeploying your app.\\n\\n**This translates to:**\\n- Faster time-to-market: Experiment with new features and iterate quickly based on user feedback.\\n- Reduced risk: Gradually roll out features to minimize potential issues and impact.\\n- Enhanced control: Turn features on or off in real-time based on user segments or other criteria.\\n\\n## How GO Feature Flag Delivers for Mobile\\n\\nTo bring feature flags to mobile, we\'ve fully embraced the OpenFeature standard.\\n\\n**This means:**\\n- Native support for **iOS** and **Android**: A provider for each platform ensures seamless integration with the OpenFeature SDKs in your mobile app\'s core.\\n- **React Native** compatibility: With the usage of GO Feature Flag web provider and the OpenFeature React SDK you can now manage feature flags within your React Native app using familiar JavaScript syntax.\\n\\n## Diving Deeper into the Tech\\n\\nWhen it comes to client side, on the 3 platforms we are using the OpenFeature static paradigm *(client side SDK)*. What does it means?\\nThe key distinction between the client- and server-side feature flagging is the difference in how often evaluation context changes.\\n\\nWhen on your mobile device, your evaluation context is changing very rarely since the device is linked to a user. Also, in the client, you expect a very low latency to get the value of your flag.\\nBased on this idea, the GO Feature Flag providers will retrieve your set of flags and cache them on the device, so you can evaluate them without any network call.\\n\\nIf you want to read more about the OpenFeature static paradigm, you can read this [article from Pete Hodgson](https://openfeature.dev/blog/catering-to-the-client-side) in the OpenFeature blog.\\n\\n\\nFor those interested in the technical details, let\'s explore how this integration works in this sequence diagram:\\n\\n[![](https://mermaid.ink/img/pako:eNrFVdtO20AQ_ZXV9oEgGUV9aokqpBIuQhUKahBClV829thZsd5x1-tAivj3zl4cJyEE-tQ8Zcdnzpy57T7zDHPgI97A7xZ0BmdSlEZUqWb0q4WxMpO10JaJumaiYdc4kwrcSclMWIn6NRQLh5zUoAsQtjXApmc_vs3M8GQgNVtia5jCTCjHcvja3ce5nLCL6HyhRMluDC5kDubjNCUWxS6mn6DE0vE9LQOZgQotEEPg0HRguADjeBNPM2JXWloplGx8yi5Dl95Fnx57lHb-purATHxHJydIdA3Y7tPgchJdnEdnTWAhVOuDjVFbeLIxQyyIoh4xGQX9gcFbUBcsqP9-c8VuJtNbNsTCQD1cfB5GJxgWFLXZzrxOesexUIpZZCXQELi_c2DeiXUcua-jKIXUjfXfe0ksC5pCBMd6FBJYi1sHy1hk5LoeYo2n6dqjEGtGwOwhQLK50CVEpt1ZjD1aFo6XOiMbJpysQpatiSI9CYUDE4binlpEkJygOmcGqGzN3OuSlI7RNHWZk9uHdUmwfyr3VkGCEXTeFSXOyqrvLgCNkLPsmVQ_d-erum1PHnXxFFGB0HcEgUHKq-WRE5XyhBVCNbAaNBZ0UeaoFhC9eubBQfQ8ONxS7CDQs5DVy47mPdrHoQ203buHKOxrgYbBk6hqdw8V1lHQVJTk1V0L_YWwsXJxPQYaHs_fWa-VfQp78f9xx0jVm3v2wY3aOWdsc9Biw3jCKzCVkDk9Fs_OlHIirSDlhOMz0dC_ZM1-J4wUM0WbSYDnbuJTXhtZCbMco0ITfD9lUHyBr9E9oFyZTh_Kd1CR65byXkceHx9vwJTUsO87jRDdpZuaPCZAXlL9QumL1uJ0qTM-sqaFhLd1Tn2J7-Wm8TyXFg0f-X1KOPjjdXhow8VDfPRI_UKsViiDbTmPp5e_6kKEdw?type=png)](https://mermaid.live/edit#pako:eNrFVdtO20AQ_ZXV9oEgGUV9aokqpBIuQhUKahBClV829thZsd5x1-tAivj3zl4cJyEE-tQ8Zcdnzpy57T7zDHPgI97A7xZ0BmdSlEZUqWb0q4WxMpO10JaJumaiYdc4kwrcSclMWIn6NRQLh5zUoAsQtjXApmc_vs3M8GQgNVtia5jCTCjHcvja3ce5nLCL6HyhRMluDC5kDubjNCUWxS6mn6DE0vE9LQOZgQotEEPg0HRguADjeBNPM2JXWloplGx8yi5Dl95Fnx57lHb-purATHxHJydIdA3Y7tPgchJdnEdnTWAhVOuDjVFbeLIxQyyIoh4xGQX9gcFbUBcsqP9-c8VuJtNbNsTCQD1cfB5GJxgWFLXZzrxOesexUIpZZCXQELi_c2DeiXUcua-jKIXUjfXfe0ksC5pCBMd6FBJYi1sHy1hk5LoeYo2n6dqjEGtGwOwhQLK50CVEpt1ZjD1aFo6XOiMbJpysQpatiSI9CYUDE4binlpEkJygOmcGqGzN3OuSlI7RNHWZk9uHdUmwfyr3VkGCEXTeFSXOyqrvLgCNkLPsmVQ_d-erum1PHnXxFFGB0HcEgUHKq-WRE5XyhBVCNbAaNBZ0UeaoFhC9eubBQfQ8ONxS7CDQs5DVy47mPdrHoQ203buHKOxrgYbBk6hqdw8V1lHQVJTk1V0L_YWwsXJxPQYaHs_fWa-VfQp78f9xx0jVm3v2wY3aOWdsc9Biw3jCKzCVkDk9Fs_OlHIirSDlhOMz0dC_ZM1-J4wUM0WbSYDnbuJTXhtZCbMco0ITfD9lUHyBr9E9oFyZTh_Kd1CR65byXkceHx9vwJTUsO87jRDdpZuaPCZAXlL9QumL1uJ0qTM-sqaFhLd1Tn2J7-Wm8TyXFg0f-X1KOPjjdXhow8VDfPRI_UKsViiDbTmPp5e_6kKEdw)\\n\\nAs you can see, the provider is keeping all the flags in memory to serve them as fast as possible without any network call.\\n\\n## How to integrate GO Feature Flag into your mobile app?\\n\\nReady to supercharge your mobile app development with GO Feature Flag? Here\'s how to get started:\\n- [Integrate the OpenFeature SDK into your iOS project](https://gofeatureflag.org/docs/openfeature_sdk/client_providers/openfeature_swift)\\n- [Integrate the OpenFeature SDK into your Android project](https://gofeatureflag.org/docs/openfeature_sdk/client_providers/openfeature_android)\\n- [Integrate the OpenFeature SDK into your React Native project](https://gofeatureflag.org/docs/openfeature_sdk/client_providers/openfeature_react)\\n\\nOur comprehensive documentation provides detailed instructions and examples to guide you through the process.\\n\\n## The Future of Feature Flags\\n\\nWe\'re excited about the potential of feature flags to transform mobile app development. With GO Feature Flag\'s expanded support, we\'re empowering developers to build better, faster, and more reliable apps.\\n\\nStay tuned for future updates as we continue to enhance our platform and explore new possibilities.\\n\\nDo you have already integrate GO Feature Flag in your mobile app? Let us know your experience in our [Slack channel](http://gofeatureflag.org/slack) or on [X](https://x.com/gofeatureflag)."},{"id":"/2024/03/13/ofrep","metadata":{"permalink":"/blog/2024/03/13/ofrep","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2024-03-13-ofrep/index.mdx","source":"@site/blog/2024-03-13-ofrep/index.mdx","title":"GO Feature Flag Supports OpenFeature Remote Evaluation Protocol (OFREP)!","description":"GO Feature Flag is now one of the first flag management systems to support the Open Feature Remote Evaluation Protocol (OFREP).","date":"2024-03-13T00:00:00.000Z","tags":[{"inline":true,"label":"openfeature","permalink":"/blog/tags/openfeature"},{"inline":true,"label":"ofrep","permalink":"/blog/tags/ofrep"},{"inline":true,"label":"openfeature-remote-evaluation-protocol","permalink":"/blog/tags/openfeature-remote-evaluation-protocol"}],"readingTime":6.72,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"title":"GO Feature Flag Supports OpenFeature Remote Evaluation Protocol (OFREP)!","description":"GO Feature Flag is now one of the first flag management systems to support the Open Feature Remote Evaluation Protocol (OFREP).","authors":["thomaspoignant"],"tags":["openfeature","ofrep","openfeature-remote-evaluation-protocol"]},"unlisted":false,"prevItem":{"title":"GO Feature Flag: Now Powering Your Mobile App Experience","permalink":"/blog/2024/07/25/go-feature-flag-mobile-support"},"nextItem":{"title":"The Power of Rollbacks","permalink":"/blog/2023/09/12/the-power-of-rollbacks"}},"content":"import styles from \'./styles.module.css\'\\n\\n<div className={styles.openfeaturelogo}>\\n  <svg xmlns=\\"http://www.w3.org/2000/svg\\"\\n       role=\\"img\\"\\n       viewBox=\\"3.55 1.55 283.66 127.41\\">\\n    <title>OpenFeature logo</title>\\n    <path fill=\\"#231F20\\" d=\\"M62.61 57.5L34.25 57.5C27.5533 57.5 21.1309 54.8397 16.3956 50.1044 11.6603 45.3692 9 38.9467 9 32.25 9 25.5533 11.6603 19.1308 16.3956 14.3956 21.1309 9.6603 27.5533 7 34.25 7L62.61 7C69.3067 7 75.7292 9.6603 80.4645 14.3956 85.1998 19.1308 87.86 25.5533 87.86 32.25 87.86 38.9467 85.1998 45.3692 80.4645 50.1044 75.7292 54.8397 69.3067 57.5 62.61 57.5zM62.72 13.65C59.0413 13.65 55.4452 14.7409 52.3864 16.7847 49.3277 18.8285 46.9436 21.7334 45.5359 25.1321 44.1281 28.5308 43.7597 32.2706 44.4774 35.8787 45.1951 39.4867 46.9666 42.8009 49.5678 45.4022 52.1691 48.0034 55.4833 49.7749 59.0913 50.4926 62.6994 51.2103 66.4392 50.8419 69.8379 49.4342 73.2366 48.0264 76.1416 45.6424 78.1853 42.5836 80.2291 39.5248 81.32 35.9287 81.32 32.25 81.3213 29.8037 80.8398 27.3811 79.903 25.1213 78.9663 22.8614 77.5927 20.8087 75.861 19.0807 74.1293 17.3527 72.0736 15.9836 69.8118 15.0517 67.5499 14.1197 65.1263 13.6434 62.68 13.65H62.72zM107.68 20.19C110.301 18.69 113.281 17.9328 116.3 18 119.521 17.9625 122.691 18.8026 125.47 20.43 128.222 22.0538 130.463 24.4165 131.94 27.25 133.565 30.4035 134.376 33.9132 134.3 37.46 134.365 41.0217 133.555 44.5449 131.94 47.72 130.487 50.6106 128.249 53.0338 125.484 54.7121 122.718 56.3904 119.535 57.2561 116.3 57.21 113.305 57.2704 110.35 56.517 107.75 55.03 105.438 53.7228 103.494 51.8513 102.1 49.59V74.59H95.8V18.63H102.1V25.63C103.448 23.3567 105.373 21.4801 107.68 20.19zM126.13 29.98C125.061 27.9524 123.438 26.2704 121.45 25.13 119.475 24.0226 117.244 23.4504 114.98 23.47 112.733 23.4554 110.523 24.0424 108.58 25.17 106.585 26.338 104.954 28.0381 103.87 30.08 102.7 32.4068 102.09 34.9753 102.09 37.58 102.09 40.1846 102.7 42.7531 103.87 45.08 104.954 47.1219 106.585 48.822 108.58 49.99 110.523 51.1176 112.733 51.7046 114.98 51.69 117.25 51.7098 119.483 51.1229 121.45 49.99 123.441 48.8265 125.063 47.1245 126.13 45.08 127.327 42.7361 127.922 40.1311 127.86 37.5 127.927 34.8875 127.332 32.3004 126.13 29.98zM174.31 39.95H143.99C143.99 41.5487 144.313 43.1311 144.937 44.6028 145.561 46.0745 146.476 47.4056 147.625 48.5168 148.775 49.628 150.136 50.4966 151.628 51.071 153.12 51.6453 154.712 51.9136 156.31 51.86 158.726 51.9452 161.109 51.2778 163.13 49.95 164.927 48.7135 166.274 46.9275 166.97 44.86H173.75C172.793 48.4337 170.644 51.5736 167.66 53.76 164.359 56.1244 160.368 57.3304 156.31 57.19 152.915 57.2412 149.567 56.3887 146.61 54.72 143.775 53.1081 141.458 50.7215 139.93 47.84 138.267 44.6478 137.435 41.0884 137.51 37.49 137.429 33.9087 138.236 30.363 139.86 27.17 141.354 24.3031 143.651 21.9334 146.47 20.35 149.474 18.7176 152.851 17.894 156.27 17.96 159.605 17.8946 162.899 18.7086 165.82 20.32 168.526 21.826 170.749 24.0697 172.23 26.79 173.758 29.652 174.532 32.856 174.48 36.1 174.491 37.3854 174.434 38.6705 174.31 39.95zM166.42 28.63C165.383 26.9272 163.881 25.5567 162.09 24.68 160.203 23.7646 158.128 23.3023 156.03 23.33 153.036 23.2505 150.125 24.3245 147.9 26.33 145.574 28.5433 144.198 31.5724 144.06 34.78H168.01C168.06 32.6223 167.509 30.4931 166.42 28.63zM209.82 22.12C212.68 24.92 214.11 28.9466 214.11 34.2V56.56H207.88V35.1C207.88 31.32 206.94 28.42 205.05 26.42 204.041 25.4006 202.829 24.6063 201.491 24.0893 200.154 23.5722 198.722 23.3441 197.29 23.42 195.824 23.3494 194.36 23.5911 192.995 24.129 191.629 24.6669 190.394 25.4887 189.37 26.54 187.37 28.62 186.387 31.6433 186.42 35.61V56.61H180.12V18.63H186.42V24.03C187.671 22.0905 189.432 20.5335 191.51 19.53 193.721 18.4552 196.152 17.9108 198.61 17.94 200.663 17.852 202.713 18.1765 204.638 18.8945 206.564 19.6124 208.326 20.7092 209.82 22.12zM70.91 74.72V79.85H49.91V96.13H66.91V101.26H49.91V122.99H43.61V74.72H70.91zM110.23 106.36H79.9C79.903 107.959 80.227 109.541 80.853 111.012 81.48 112.483 82.395 113.813 83.545 114.924 84.695 116.035 86.056 116.904 87.548 117.478 89.04 118.053 90.632 118.322 92.23 118.27 94.646 118.355 97.029 117.688 99.05 116.36 100.847 115.124 102.194 113.338 102.89 111.27H109.67C108.713 114.844 106.565 117.984 103.58 120.17 100.278 122.533 96.288 123.739 92.23 123.6 88.852 123.656 85.519 122.818 82.57 121.17 79.732 119.561 77.414 117.174 75.89 114.29 74.237 111.096 73.418 107.536 73.51 103.94 73.429 100.359 74.236 96.813 75.86 93.62 77.352 90.7511 79.649 88.3806 82.47 86.8 85.474 85.1663 88.851 84.3427 92.27 84.41 95.605 84.3447 98.899 85.1586 101.82 86.77 104.524 88.2787 106.747 90.5217 108.23 93.24 109.75 96.1047 110.521 99.3074 110.47 102.55 110.456 103.823 110.376 105.095 110.23 106.36zM102.33 95.04C101.294 93.3502 99.794 91.9932 98.01 91.13 96.122 90.2157 94.047 89.7535 91.95 89.78 88.955 89.6995 86.045 90.7736 83.82 92.78 81.495 94.9948 80.116 98.0223 79.97 101.23H103.97C104.017 99.0534 103.449 96.9077 102.33 95.04zM116.04 93.66C117.517 90.8265 119.758 88.4638 122.51 86.84 125.292 85.2113 128.466 84.3712 131.69 84.41 134.714 84.3372 137.702 85.0799 140.34 86.56 142.623 87.8254 144.515 89.6933 145.81 91.96V85.04H152.18V122.97H145.81V115.91C144.479 118.211 142.556 120.114 140.24 121.42 137.616 122.911 134.637 123.664 131.62 123.6 128.412 123.642 125.257 122.786 122.51 121.13 119.761 119.432 117.533 117.011 116.07 114.13 114.461 110.96 113.654 107.444 113.72 103.89 113.628 100.34 114.425 96.823 116.04 93.66zM144.04 96.46C142.973 94.4266 141.355 92.7352 139.37 91.58 137.397 90.4783 135.175 89.8999 132.915 89.8999 130.655 89.8999 128.433 90.4783 126.46 91.58 124.486 92.7254 122.877 94.4071 121.82 96.43 120.619 98.7367 120.024 101.31 120.09 103.91 120.024 106.542 120.619 109.148 121.82 111.49 122.875 113.53 124.483 115.231 126.46 116.4 128.411 117.537 130.633 118.124 132.89 118.1 135.163 118.12 137.4 117.533 139.37 116.4 141.36 115.238 142.98 113.536 144.04 111.49 145.232 109.17 145.827 106.588 145.77 103.98 145.85 101.371 145.268 98.7841 144.08 96.46H144.04zM167.82 90.23V112.59C167.75 113.287 167.818 113.992 168.021 114.662 168.223 115.333 168.556 115.958 169 116.5 169.78 117.26 171.15 117.64 173.09 117.64H177.72V122.97H172.05C168.54 122.97 165.91 122.17 164.15 120.55 162.39 118.93 161.52 116.28 161.52 112.55V90.23H156.61V85.04H161.51V75.48H167.81V85.04H177.71V90.23H167.82zM216.28 85.04V122.97H209.98V117.37C208.773 119.32 207.04 120.891 204.98 121.9 202.779 122.997 200.349 123.555 197.89 123.53 195.113 123.584 192.365 122.952 189.89 121.69 187.518 120.461 185.574 118.544 184.31 116.19 182.891 113.433 182.203 110.359 182.31 107.26V85.04H188.51V106.43C188.51 110.17 189.457 113.043 191.35 115.05 192.356 116.07 193.567 116.864 194.903 117.381 196.239 117.898 197.67 118.126 199.1 118.05 200.579 118.131 202.058 117.895 203.438 117.357 204.818 116.819 206.067 115.991 207.1 114.93 209.03 112.86 210 109.83 210 105.86V85.04H216.28zM235.29 86.13C237.585 84.8635 240.18 84.2416 242.8 84.33V90.83H241.14C234.067 90.83 230.533 94.66 230.54 102.32V122.95H224.24V85.04H230.51V91.2C231.57 89.0765 233.233 87.3128 235.29 86.13zM281.77 106.36H251.45C251.45 107.959 251.772 109.541 252.397 111.013 253.021 112.485 253.936 113.816 255.085 114.927 256.235 116.038 257.596 116.907 259.088 117.481 260.58 118.055 262.172 118.324 263.77 118.27 266.187 118.358 268.571 117.69 270.59 116.36 272.391 115.128 273.74 113.34 274.43 111.27H281.22C280.256 114.84 278.109 117.978 275.13 120.17 271.825 122.534 267.831 123.74 263.77 123.6 260.395 123.658 257.065 122.819 254.12 121.17 251.282 119.561 248.964 117.174 247.44 114.29 245.769 111.1 244.933 107.54 245.01 103.94 244.932 100.358 245.743 96.8121 247.37 93.62 248.858 90.7487 251.157 88.3773 253.98 86.8 256.981 85.1676 260.355 84.3439 263.77 84.41 267.108 84.3457 270.405 85.1595 273.33 86.77 276.034 88.2762 278.253 90.5201 279.73 93.24 281.258 96.102 282.032 99.306 281.98 102.55 281.976 103.823 281.906 105.094 281.77 106.36zM273.88 95.04C272.832 93.3419 271.314 91.9838 269.51 91.13 267.641 90.2233 265.587 89.7613 263.51 89.78 260.512 89.6989 257.598 90.7729 255.37 92.78 253.044 94.9933 251.668 98.0224 251.53 101.23H275.53C275.569 99.053 274.998 96.9086 273.88 95.04z\\"/>\\n  </svg>\\n  <br/>\\n</div>\\n\\nWe\'re excited to announce that GO Feature Flag is now one of the first flag management systems to support the Open Feature Remote Evaluation Protocol (OFREP) _(currently in an experimental stage)_.\\n\\nThis is a significant step towards the adoption of Open Feature, a community-driven initiative aiming to standardize feature flag management across different platforms.\\n\\n\x3c!--truncate--\x3e\\n\\n## What is OFREP?\\n\\nOFREP is an API specification that allows you to connect your applications to any feature flag management system that supports the protocol using generic providers.  This means more flexibility and choice when it comes to managing your features.\\n\\nFor the full technical details, you can head over to the Open Feature Protocol documentation: Open Feature Protocol: https://github.com/open-feature/protocol/blob/main/README.md\\n\\n## Why is this exciting?\\n\\nWhile OFREP is still under development, its potential is significant. By integrating with OFREP, GO Feature Flag positions itself for:\\n\\n- **Platform Independence**: Easily connect your applications to different feature flag systems without code changes (once OFREP is widely adopted).\\n- **Flexibility**: Choose the feature flag management solution that best suits your needs (future benefit).\\n- **Standardization**: Foster collaboration and interoperability within the developer community (future benefit).\\n\\n## Open Feature Providers: A Call to Action!\\n\\nWhile OFREP itself is in its **experimental stages**, Open Feature Providers are still in the Proof-of-Concept (POC) phase.\\nThis is a fantastic opportunity for developers and organizations to contribute to building this ecosystem.\\n\\nIf you\'re passionate about feature flagging and want to be part of the Open Feature revolution, we encourage you to reach out and get involved!\\n\\n## Let\'s move forward, together!\\n\\nWe at GO Feature Flag believe that OFREP has the potential to pave the way for a more unified and efficient approach to feature management. By joining the Open Feature movement, we hope to empower developers and create a stronger feature flagging landscape for everyone.\\n\\nStay tuned for further updates as we continue to explore the possibilities of OFREP.\\n\\n## Want to test it?\\nIf you want to test it, go to our [documentation](https://gofeatureflag.org/docs/experimental/ofrep) and start using it today!"},{"id":"/2023/09/12/the-power-of-rollbacks","metadata":{"permalink":"/blog/2023/09/12/the-power-of-rollbacks","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2023-09-12-the-power-of-rollbacks/index.md","source":"@site/blog/2023-09-12-the-power-of-rollbacks/index.md","title":"The Power of Rollbacks","description":"\ud83d\udea8 Bug alert! No worries, feature flags have your back. Learn how to respond swiftly to issues without breaking a sweat","date":"2023-09-12T00:00:00.000Z","tags":[{"inline":true,"label":"rollback","permalink":"/blog/tags/rollback"}],"readingTime":4.21,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"title":"The Power of Rollbacks","description":"\ud83d\udea8 Bug alert! No worries, feature flags have your back. Learn how to respond swiftly to issues without breaking a sweat","authors":["thomaspoignant"],"tags":["rollback"]},"unlisted":false,"prevItem":{"title":"GO Feature Flag Supports OpenFeature Remote Evaluation Protocol (OFREP)!","permalink":"/blog/2024/03/13/ofrep"},"nextItem":{"title":"Add Feature Flags in your Node.JS application using GO Feature Flag and Open Feature SDK","permalink":"/blog/2023/07/24/nodejs-tutorial"}},"content":"As software engineers, the process of releasing new features and updates can be both exhilarating and nerve-wracking.  \\nYou\'ve put in countless hours of hard work, and the moment has arrived to introduce your latest creation to the world. \\n\\n**But what happens when things don\'t go as planned? What if a new feature causes unforeseen issues or negatively impacts your users?**\\n\\nThis is where feature flags come to the rescue, offering a safety net that allows you to roll back features immediately without waiting for a deployment. In this blog post, we\'ll explore why feature flags are an essential tool for securing your software releases.\\n\\n\x3c!-- truncate --\x3e\\n\\n## The old way of doing rollbacks\\n\\nIf you are not using feature flags, your release process probably look like this:\\n![classic-RELEASE-process.svg](classic-RELEASE-process.svg)\\n\\n1. You code your new feature.\\n2. Your CI/CD is in charge to put your code in production.\\n3. Your new feature is available to all your users.\\n\\n**BUT what happen if your releases needs to be rollback?**\\n\\n![classic-ROLLBACK-process.svg](classic-ROLLBACK-process.svg)\\n\\nYou will most likely use the same process and go with something like\\n1. Revert your code and push the code.\\n2. Your CI/CD is in charge to put your code in production.\\n3. Your rollback is effective.\\n\\nDon\'t get me wrong this works, and you are probably doing it for years, but here are some problems your may occur while doing it:\\n- You have to identify what was changed and rollback the code to rollback the code associated to your feature.\\n- If you are unlucky, your main branch has changed since your last deployment, so coming back to the previous state may require to rollback more than your feature, and it can impact other teams.\\n- Depending on your deployment pipeline it can take minutes to hours to push your rollback in production.\\n\\n## Secure your release using feature flags\\n### How feature flags can help here?\\nThe main things we try to achieve here is to unlink deploy and release.\\nChanging your release process with feature flags is important if you want to secure your way to release new feature in your application.\\n\\nTo achieve this we will follow these steps:\\n\\n1. Create a dedicated feature flag for this feature. This flag should be independent of other flags and only control the state of this new feature.\\n2. In your application\'s codebase, implement checks that will monitor the state of the flag. This can usually be done with the usage of a `boolean` flag. If the flag is set to \\"**`false`**\\" the code should disable the feature\'s functionality.\\n3. When deploying the feature to production, ensure that the flag is initially set to `false` position for 100% of your users.\\n4. When you are ready to release the new feature, set the feature to `true` position for a part of your users.\\n5. Monitor the feature\'s performance closely during its initial release.\\n![ff-release-process.svg](ff-release-process.svg)\\n\\n### BUT what happen if your releases needs to be rollback?\\n\\nNow that we have a flag for our new feature it makes our life way easier to rollback this new feature, because as you guess we only have to put back the flag to 0% of our users and the feature will not be available anymore. \\n\\n![ff-rollback-process.svg](ff-rollback-process.svg)\\n\\n### How to do this with GO Feature Flag?\\n\\n1. Create a new flag\\n  ```yaml\\n  my-new-feature:\\n    variations:\\n      enabled: true\\n      disabled: false\\n    defaultRule:\\n      percentage:\\n        enabled: 0\\n        disabled: 100\\n  ```\\n  _As you can see the flag `my-new-feature` will be off for all your users._\\n\\n2. Wrap your new feature with the check of the flag\\n  ```go\\n      evalCtx := of.NewEvaluationContext(\\"d45e303a-38c2-11ed-a261-0242ac120002\\")\\n      if client.BooleanValue(ctx, \\"my-new-feature\\", false, evalCtx){\\n        // code of my new feature ...\\n      }\\n  ```\\n  _This example use the OpenFeature GO SDK syntax, but you can do it in any language._ \\n  \\n3. Deploy your code in production.\\n4. When you are ready to release, edit your flag configuration file to add traffic.\\n  ```yaml\\n  my-new-feature:\\n    variations:\\n      enabled: true\\n      disabled: false\\n    defaultRule:\\n      percentage:\\n        enabled: 100\\n        disabled: 0\\n  ```\\n5. \ud83d\udea8 If you find a bug and you want to rollback, just edit the flag configuration file again and your feature will be rollback.\\n  ```yaml\\n  my-new-feature:\\n    variations:\\n      enabled: true\\n      disabled: false\\n    defaultRule:\\n      percentage:\\n        enabled: 0\\n        disabled: 100\\n  ```\\n6. Your feature will be rollback immediately and the good part is that you don\'t even have deployed anything.\\n\\n## Conclusion\\n\\nIn the dynamic world of software engineering, ensuring the security of your releases is paramount.  \\nFeature flags offer a powerful mechanism for immediate rollbacks, reducing the risk associated with introducing new features. \\n\\nBy embracing feature flags, you can respond swiftly to issues, minimize downtime, and make informed decisions based on real-time data.  \\nThe result is a more robust and user-friendly software release process that enhances both the development team\'s confidence and the end-users\' experience. \\n\\nSo, don\'t wait\u2014start incorporating feature flags into your development workflow today and unlock the potential for secure and successful releases."},{"id":"/2023/07/24/nodejs-tutorial","metadata":{"permalink":"/blog/2023/07/24/nodejs-tutorial","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2023-07-24-nodejs-tutorial/index.md","source":"@site/blog/2023-07-24-nodejs-tutorial/index.md","title":"Add Feature Flags in your Node.JS application using GO Feature Flag and Open Feature SDK","description":"In this video, we\'ll walk you through the process of implementing feature flags in your Node js applications, allowing you to roll out new features gradually and control their visibility in real-time.","date":"2023-07-24T00:00:00.000Z","tags":[{"inline":true,"label":"openfeature","permalink":"/blog/tags/openfeature"},{"inline":true,"label":"nodeJS","permalink":"/blog/tags/node-js"}],"readingTime":2.91,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"title":"Add Feature Flags in your Node.JS application using GO Feature Flag and Open Feature SDK","description":"In this video, we\'ll walk you through the process of implementing feature flags in your Node js applications, allowing you to roll out new features gradually and control their visibility in real-time.","authors":["thomaspoignant"],"tags":["openfeature","nodeJS"],"image":"http://gofeatureflag.org/assets/images/banner-819d71b94352213afa22d2b53f376cab.png"},"unlisted":false,"prevItem":{"title":"The Power of Rollbacks","permalink":"/blog/2023/09/12/the-power-of-rollbacks"},"nextItem":{"title":"Enhancing Flag Configuration with Flag Metadata","permalink":"/blog/2023/06/09/flag-metadata"}},"content":"<iframe width=\\"100%\\" height=\\"444\\" src=\\"https://www.youtube.com/embed/ascFFZqjQAI\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\nWelcome to this tutorial on using feature flags in Node js with GO Feature Flag and Open Feature SDKs.\\n\\nIn this video, we\'ll walk you through the process of implementing feature flags in your Node js applications, allowing you to roll out new features gradually and control their visibility in real-time.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Setup GO Feature Flag\\nBefore we proceed with the implementation, it\'s essential to set up GO Feature Flag to efficiently evaluate our flags.\\nTo achieve this, we will create a new file called `goff-proxy.yaml` that will contain the configuration on how to retrieve our feature flags\' configuration file.\\n\\nIn this file, we will first configure where to retrieve the flags and also a polling interval _(here 5000 milliseconds)_.  \\nIt means that GO Feature Flag will read the file every 5 seconds to check if your configuration has changed.\\n\\n```yaml\\nretriever:\\n  kind: github  # type of retriever we are using\\n  repositorySlug: thomaspoignant/demo-goff  # repository we are retrieving\\n  path: flags.yaml  # location of the file in the repository\\npollingInterval: 5000  # Time in milliseconds we wait before trying to check for changes\\n```\\n\\n## Create our first flag\\nTo create our flag we start by using the [GO Feature Flag editor](https://editor.gofeatureflag.org), for our test we will create a flag\\nnamed `my-new-feature` and it will use a type `boolean`.\\n\\n![editor.png](editor.png)\\n\\nWhen it is ready you can  copy/paste the flag definition and commit it in GitHub.\\n\\n## Start GO Feature Flag\\nWe will now start GO Feature Flag, for this we gonna use the docker image.\\n\\n```shell\\ndocker run -p 1031:1031 -e RETRIEVER_TOKEN=$GITHUB_TOKEN -v $(pwd):/goff thomaspoignant/go-feature-flag\\n```\\n\\nWith this command we launch GO Feature Flag on the port 1031 and with the configuration file we just created, you can also see that we provide a GitHub Token, this is to avoid being rate limited by the Github API.\\n\\n![terminal.png](terminal.png)\\n\\nGO Feature Flag is now started, and we can see that our flag is loaded.\\n\\n## Create Node.JS application using OpenFeature\\nNow let\'s start to create our Node JS application.\\n\\n```typescript\\nimport { GoFeatureFlagProvider } from \\"@openfeature/go-feature-flag-provider\\"\\nimport { EvaluationContext, OpenFeature } from \\"@openfeature/js-sdk\\"\\n\\nasync function main(){\\n  // We start by creating an instance of the Go Feature Flag Provider\\n  // We are just setting the endpoint to connect to our instance of GO Feature Flag\\n  const provider = new GoFeatureFlagProvider({\\n     endpoint: \'http://localhost:1031\'\\n  })\\n\\n  // We associate the provider to the SDK\\n  // It means that now when we call OpenFeature it will rely on GO Feature Flag as a backend.\\n  OpenFeature.setProvider(provider)\\n  \\n  // We need to ask for a client to evaluate the flags.\\n  const client = OpenFeature.getClient()\\n\\n  // We create a context for our evaluation.\\n  const ctx: EvaluationContext = {\\n     targetingKey: \'aae1cb41-c3cb-4753-a117-031ddc958f82\'\\n  }\\n\\n  // We evaluate the flag.\\n  const myNewFeature = await client.getBooleanValue(\\"my-new-feature\\", false, ctx)\\n\\n  if (myNewFeature) {\\n    // the new feature is available\\n  } else {\\n    // apply the old feature\\n  }\\n}\\n\\nmain()\\n```\\n\\nYou are now ready to use GO Feature Flag in your application.\\n\\n## Conclusion\\n\\nIn this tutorial we\'ve seen how simple it is to use GO Feature Flag in your Node.JS application using the OpenFeature SDK.\\n\\nI encourage you to read our documentation to see all the amazing possibility that you will have.\\n\\nAnd please provide us [feedbacks](mailto:contact@gofeatureflag.org) on how we can make your experience even better."},{"id":"/2023/06/09/flag-metadata","metadata":{"permalink":"/blog/2023/06/09/flag-metadata","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2023-06-09-flag-metadata/index.mdx","source":"@site/blog/2023-06-09-flag-metadata/index.mdx","title":"Enhancing Flag Configuration with Flag Metadata","description":"Empowering developers to attach additional information directly to flag configurations for enhanced management and code efficiency.","date":"2023-06-09T00:00:00.000Z","tags":[{"inline":true,"label":"feature flag","permalink":"/blog/tags/feature-flag"},{"inline":true,"label":"relay-proxy","permalink":"/blog/tags/relay-proxy"},{"inline":true,"label":"metadata","permalink":"/blog/tags/metadata"}],"readingTime":2.33,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"title":"Enhancing Flag Configuration with Flag Metadata","description":"Empowering developers to attach additional information directly to flag configurations for enhanced management and code efficiency.","authors":["thomaspoignant"],"tags":["feature flag","relay-proxy","metadata"],"image":"http://gofeatureflag.org/assets/images/3819075-0f37048ae26af73edc44747cd03d9eb7.png"},"unlisted":false,"prevItem":{"title":"Add Feature Flags in your Node.JS application using GO Feature Flag and Open Feature SDK","permalink":"/blog/2023/07/24/nodejs-tutorial"},"nextItem":{"title":"Limiting Access to the relay proxy with API Keys","permalink":"/blog/2023/04/12/relay_proxy_api_keys"}},"content":"![metadata](3819075.png)\\n\\nIn the ever-evolving world of software development, feature flag solutions have become instrumental in enabling continuous integration and deployment.\\nThese solutions allow developers to toggle features on and off without deploying new code, providing flexibility and control over feature releases.\\n\\nBut sometimes you need to give context about your flag, is it linked to an issue? Do you need a precise description? ...\\nTo respond to this, **GO Feature Flag** has recently introduced an exciting new feature: **the ability to add metadata to each flag configuration**.\\n\\nWith the version `v1.11.0` of GO Feature Flag, developers can now add valuable metadata to their flag configurations.\\nThis metadata serves as additional information linked directly to each flag, allowing for a more comprehensive understanding of its purpose and context.\\nThis metadata can include essential details such as issue tracker links, descriptions, or any other information that developers deem relevant.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Improved Code Efficiency\\nThe inclusion of metadata in flag configurations brings substantial benefits in terms of code efficiency and reusability.\\nBy using the `VariationDetails` functions, developers can easily retrieve the associated metadata when working with the flag.\\n\\nThis eliminates the need for additional queries or requests to obtain essential information related to a specific flag.\\nDevelopers can conveniently leverage this information within their code, leading to streamlined development processes and improved overall efficiency.\\n\\n## How to add the metadata?\\nWe have introduced a new field in the configuration of your flag\\n\\n```yaml\\nexample_flag:\\n  variations:\\n    A: true\\n    B: false\\n  defaultRule:\\n    variation: B\\n  metadata:\\n    description: this is a super simple example feature flag\\n    issue-link: https://jira.xxx/GOFF-01\\n```\\n\\nNow that you have this field available you can read the metadata in your `VariationDetails` when the evaluation is done.\\n\\nGO Feature Flag relay-proxy also enable seamless access to the added metadata.\\n\\n## Open Feature SDK Compatibility\\nTo further enhance the usability and compatibility of GO Feature Flag, the new metadata feature aligns with the **v0.6.0** version of the Open Feature specification.\\nThis update ensures that the metadata can be retrieved seamlessly using the Open Feature SDKs.\\n\\nAs soon as the SDKs will compatible with the metadata we will support it in the different GO Feature Flag providers.\\n\\n## Conclusion\\nThe introduction of metadata support in GO Feature Flag marks a significant milestone in feature flag solutions.\\nEnabling developers to attach relevant information directly to their flag configurations opens up new possibilities for\\nenhanced flag management and streamlined development processes.\\nWith the ability to retrieve metadata, developers can access essential information with ease.\\n\\nThe compatibility with the Open Feature SDK further solidifies the integration capabilities and ensures seamless utilization of metadata throughout the development cycle.\\nEmbrace the power of metadata and unlock a new level of control and efficiency in your feature flag management with GO Feature Flag\'s latest update."},{"id":"/2023/04/12/relay_proxy_api_keys","metadata":{"permalink":"/blog/2023/04/12/relay_proxy_api_keys","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2023-04-12-relay_proxy_api_keys/index.mdx","source":"@site/blog/2023-04-12-relay_proxy_api_keys/index.mdx","title":"Limiting Access to the relay proxy with API Keys","description":"New API Key feature in GO Feature Flag Relay Proxy 1.7.0 allows you to restrict access to the relay proxy to only known clients.","date":"2023-04-12T00:00:00.000Z","tags":[{"inline":true,"label":"feature flag","permalink":"/blog/tags/feature-flag"},{"inline":true,"label":"relay-proxy","permalink":"/blog/tags/relay-proxy"}],"readingTime":2.61,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"title":"Limiting Access to the relay proxy with API Keys","description":"New API Key feature in GO Feature Flag Relay Proxy 1.7.0 allows you to restrict access to the relay proxy to only known clients.","authors":["thomaspoignant"],"tags":["feature flag","relay-proxy"],"image":"http://gofeatureflag.org/assets/images/20945235-ede9f141540af91fe5fa5fdc4f3d7fe6.png"},"unlisted":false,"prevItem":{"title":"Enhancing Flag Configuration with Flag Metadata","permalink":"/blog/2023/06/09/flag-metadata"},"nextItem":{"title":"Feature Flag best practice","permalink":"/blog/feature-flag-best-practice"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n![security](20945235.png)\\n\\nGO Feature Flag Relay Proxy is a powerful tool that enables you to evaluate your feature flags without deploying code changes.\\nIt allows you to test and roll out new features to your users gradually, and to monitor the performance of your code in real-time.\\n\\nWith the recent release of version `v1.7.0`, GO Feature Flag Relay Proxy introduces a new feature that enhances the\\nsecurity of your feature flag evaluations.\\nThis new feature allows you to control who can access your relay proxy by configuring API Keys.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Limiting Access with API Keys\\n\\nWith the release of GO Feature Flag Relay Proxy version `v1.7.0`, you can now limit access to the relay proxy by configuring API Keys.\\nThis feature allows you to restrict access to only known clients, adding an additional layer of security to your feature flag evaluations.\\n\\nTo enable this feature, you need to add a list of API Keys to your configuration.\\nOnly requests with these API Keys will be accepted. This means that any requests without a valid API Key will be rejected.\\n\\nIn your **relay proxy** configuration file it will look like this:\\n```yaml\\n# ...\\n# List of authorized API keys.\\n# Each request will need to provide one of authorized key inside Authorization header with format Bearer <api-key>.\\n# There will be no authorization when this config is not configured.\\napiKeys:\\n  - 6147795c-4438-44f1-8ab2-18cb3fa9591f # apiKey for client 1\\n  - 3e3fb534-c8fd-42e9-8f2e-c80276b1685c # apiKey for client 2\\n  - 6603f9f8-2871-4149-81e8-8a362a8ae266 # apiKey for client 3\\n  - 0fc30ffe-b9bc-4398-a9f1-6f8b8486e8ce # apiKey for client 4\\n  - 500d222e-2654-41a4-bd31-e24a629cb78a # apiKey for client 5\\n\\n# ...\\n```\\n\\n## Using Client API Keys with Openfeature Providers\\n\\nIf you are using Open Feature and our providers, we have updated them to handle the `apiKey` for you.\\nYou can now specify your `apiKey` directly when you are initializing your provider. This will authenticate every request\\nto the relay proxy with this apiKey.\\n\\nTo use this feature, you need to specify the client API Key in your Open Feature provider initialization.\\nThis can be done by adding the `apiKey` like this:\\n\\n<Tabs groupId=\\"code\\">\\n      <TabItem value=\\"go\\" label=\\"GO\\">\\n\\n```go\\nprovider, err := gofeatureflag.NewProvider(gofeatureflag.ProviderOptions{\\n  //...\\n  APIKey:   \\"6147795c-4438-44f1-8ab2-18cb3fa9591f\\",\\n})\\n```\\n\\n  </TabItem>\\n    <TabItem value=\\"dotnet\\" label=\\".NET\\">\\n\\n```dotnet\\nGoFeatureFlagProviderOptions options = new GoFeatureFlagProviderOptions{\\n    // ...\\n    ApiKey = \\"6147795c-4438-44f1-8ab2-18cb3fa9591f\\"\\n  }\\n\\nGoFeatureFlagProvider authenticatedProvider = new GoFeatureFlagProvider(options);\\n```\\n\\n  </TabItem>\\n    <TabItem value=\\"java\\" label=\\"JAVA\\">\\n\\n```java\\nGoFeatureFlagProviderOptions options =\\n      GoFeatureFlagProviderOptions.builder()\\n      .apiKey(\\"6147795c-4438-44f1-8ab2-18cb3fa9591f\\")\\n      .endpoint(relayProxyAuthenticatedEndpoint)\\n      .build();\\n\\nGoFeatureFlagProvider provider = new GoFeatureFlagProvider(options);\\n```\\n\\n  </TabItem>\\n    <TabItem value=\\"javascript\\" label=\\"JS / TS\\">\\n\\n```javascript\\nconst goFeatureFlagProvider = new GoFeatureFlagProvider({\\n  // ...\\n  apiKey: \'6147795c-4438-44f1-8ab2-18cb3fa9591f\'\\n});\\n```\\n\\n  </TabItem>\\n\\n</Tabs>\\n\\n## Conclusion\\n\\nThe new feature of GO Feature Flag Relay Proxy 1.7.0 allows you to limit access to your relay proxy by configuring API Keys.\\n\\nThis adds an extra layer of security to your feature flag evaluations, ensuring that only known clients can access your relay proxy.\\n\\nThis feature is easy to configure and can be set up in a matter of minutes, giving you peace of mind knowing that your feature flags are secure."},{"id":"feature-flag-best-practice","metadata":{"permalink":"/blog/feature-flag-best-practice","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2023-03-29-best_practice/index.mdx","source":"@site/blog/2023-03-29-best_practice/index.mdx","title":"Feature Flag best practice","description":"Discover best practices for using feature flags in software development to improve agility and reduce risk.","date":"2023-03-29T00:00:00.000Z","tags":[{"inline":true,"label":"feature flag","permalink":"/blog/tags/feature-flag"},{"inline":true,"label":"best practice","permalink":"/blog/tags/best-practice"}],"readingTime":2.9,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"title":"Feature Flag best practice","description":"Discover best practices for using feature flags in software development to improve agility and reduce risk.","slug":"feature-flag-best-practice","authors":["thomaspoignant"],"tags":["feature flag","best practice"],"image":"http://gofeatureflag.org/assets/images/best-practice-59dcc6abbf70bbb5b96f80cca9ca7463.png"},"unlisted":false,"prevItem":{"title":"Limiting Access to the relay proxy with API Keys","permalink":"/blog/2023/04/12/relay_proxy_api_keys"},"nextItem":{"title":"Multiple Configuration Flags for GO Feature Flag \ud83d\uddc4\ufe0f","permalink":"/blog/2023/03/17/multiple-config-file"}},"content":"import Link from \'@docusaurus/Link\';\\n\\n![Best Practice](best-practice.png)\\n\\nFeature flags are a powerful tool for software development, allowing for more flexible and adaptable development processes.\\n\\nHowever, to get the most out of feature flags, it\'s important to follow some best practices to ensure they are used effectively and efficiently.\\n\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\n## \ud83e\udd37 Keep flags simple and scoped\\nOne of the most important best practices for feature flags is to keep them **simple** and **scoped**.\\n\\nThis means avoiding overly complex flags that do too much, and instead using small, targeted flags that can be easily managed and maintained.\\nKeeping flags simple and scoped helps to avoid confusion and reduces the risk of bugs or other issues.\\n\\n## \u23f0 Avoid using flags as a long-term solution\\nAnother important best practice is to avoid using feature flags as a long-term solution.\\n\\nFeature flags should be used as a temporary measure to test new features or functionality, and then removed once the feature is fully tested and released.\\n\\nLeaving flags in place for too long can lead to code bloat and confusion, making it harder to maintain and update your codebase.\\n\\n## \ud83e\uddea Test and monitor flags\\nTesting and monitoring flags is essential to ensuring they are working as intended.\\n\\nThis means setting up a testing environment where you can test flags in a controlled environment, as well as monitoring\\nthe usage of flags in production to ensure they are not causing any issues.\\n\\nBy testing and monitoring flags, you can catch any issues early and avoid potential problems down the line.\\n\\n## \ud83c\udfaf Centralize your feature flags in a single location\\n\\nCentralize your feature flags in a single location, such as a feature flag management system _(GO Feature Flag is here to help you)_, to make it easier to\\nmanage and track them across different applications and environments.\\n\\nThis can help avoid conflicts and inconsistencies, improve collaboration among teams, and reduce the risk of introducing bugs or unintended consequences.\\n\\nIt also helps to use the same flag for multiple applications and to be able to act on a distributed systems.\\n\\n## \ud83d\udcdd Document flags and their purpose\\nDocumenting flags and their purpose is another best practice that can help to avoid confusion and ensure that everyone on the team is on the same page.\\n\\nThis means providing clear documentation for each flag, including its purpose, when it should be used, and any relevant notes or instructions.\\nThis can help to prevent misunderstandings and ensure that flags are used correctly.\\n\\n## \ud83d\udd28Use feature flags in combination with other tools\\nFinally, it\'s important to remember that feature flags are just one tool in your development toolbox.\\n\\nTo get the most out of feature flags, it\'s important to use them in combination with other tools, such as testing\\nframeworks, monitoring tools, CI/CD, and version control systems.\\n\\nBy using feature flags in combination with other tools, you can create a more comprehensive and effective development process.\\n\\n---\\n\\n# Conclusion\\nFollowing these best practices can help to ensure that your feature flags are used effectively and efficiently, allowing you to take full advantage of the benefits they offer.\\n\\nBy keeping flags simple and scoped, avoiding long-term use, testing and monitoring flags, documenting flags and their purpose, and using feature flags in combination with other tools, you can create a more flexible and adaptable development process that can help you to stay ahead of the competition.\\n\\n<center>\\n  <Link to={\'/docs\'} >\\n    <button className=\\"pushy__btn pushy__btn--md pushy__btn--black\\">\\n      Getting started with GO Feature Flag\\n    </button>\\n  </Link>\\n</center>"},{"id":"/2023/03/17/multiple-config-file","metadata":{"permalink":"/blog/2023/03/17/multiple-config-file","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2023-03-17-multiple-config-file/index.mdx","source":"@site/blog/2023-03-17-multiple-config-file/index.mdx","title":"Multiple Configuration Flags for GO Feature Flag \ud83d\uddc4\ufe0f","description":"Are you tired of managing your feature flags with a single configuration flag?","date":"2023-03-17T00:00:00.000Z","tags":[{"inline":true,"label":"GO Feature Flag","permalink":"/blog/tags/go-feature-flag"},{"inline":true,"label":"Open Feature","permalink":"/blog/tags/open-feature"},{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"retrievers","permalink":"/blog/tags/retrievers"}],"readingTime":2.48,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"title":"Multiple Configuration Flags for GO Feature Flag \ud83d\uddc4\ufe0f","authors":["thomaspoignant"],"tags":["GO Feature Flag","Open Feature","release","retrievers"]},"unlisted":false,"prevItem":{"title":"Feature Flag best practice","permalink":"/blog/feature-flag-best-practice"},"nextItem":{"title":"Lint your feature flag config in you CI/CD pipelines \u274c \u2705","permalink":"/blog/2023/02/20/lint-your-feature-flags"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n\\n__Are you tired of managing your feature flags with a single configuration flag?__\\n\\nWe\'ve got good news for you **GO feature flag** now supports multiple configuration flags! Plus, we\'ve added a new \\nfeature that allows all files to be loaded in parallel, making it faster and more efficient.\\n\\n![Retriever Flow](retriever-flow.png)\\n\\nManaging feature flags can be a challenging task, especially as your application grows and becomes more complex.\\nWith multiple configuration flags, you can easily manage different feature flag configurations for different apps, user groups, or any other criteria that you need.\\nYou can also use the same flags for multiple features, making it easier to maintain and update your code.\\n\\nIn addition to multiple configuration flags, we\'ve also ensured that all files are downloaded in parallel.\\nThis means that your feature flag configurations will be downloaded faster and more efficiently, improving the performance of your application.\\n\\n\x3c!-- truncate --\x3e\\n\\n## How to configure multiple flag configuration files\\nTo configure GO Feature Flag using multiple configuration flags files, simply create multiple files and store them in your favorite place.\\n\\nThen, use the field `retrievers` in your configuration to configure all the access to your configuration flags.\\n\\n<Tabs groupId=\\"code\\">\\n    <TabItem value=\\"relayproxy\\" label=\\"Relay Proxy Configuration\\">\\n\\n```yaml\\n# ...\\nretrievers:\\n  - kind: http\\n    url: https://raw.githubusercontent.com/thomaspoignant/go-feature-flag/main/examples/retriever_file/flags.yaml\\n  - kind: file\\n    path: /local/flag-file.yaml   # Example of local path\\n  - kind: http   # you can have multiple time the same type of retriever\\n    url: https://raw.githubusercontent.com/thomaspoignant/go-feature-flag/main/testdata/flag-config.yaml\\n\\n# Before we were using the field retriever that allows only one retriever at the time\\n# \\n# retriever:\\n#   kind: http\\n#   url: https://raw.githubusercontent.com/thomaspoignant/go-feature-flag/main/examples/retriever_file/flags.yaml\\n\\n```\\n\\n  </TabItem>\\n    <TabItem value=\\"gomodule\\" label=\\"GO Module Configuration\\">\\n\\n```go\\nerr := ffclient.Init(ffclient.Config{\\n  // ...\\n  Retrievers: []retriever.Retriever{\\n    &fileretriever.Retriever{\\n      Path: \\"examples/retriever_multiple_config_files/flags.yaml\\",\\n    },\\n    &fileretriever.Retriever{\\n      Path: \\"examples/retriever_multiple_config_files/flags2.yaml\\",\\n    },\\n  },\\n  //...\\n\\n  // Before we were using the field retriever that allows only one retriever at the time\\n  //\\n  // Retriever: &fileretriever.Retriever{\\n  //     Path: \\"examples/retriever_multiple_config_files/flags.yaml\\",\\n  // },\\n})\\n```\\n\\n  </TabItem>\\n</Tabs>\\n\\n\\n## What happen if 2 files have the same flag?\\nWe are taking all the configuration files in the order of the `retrievers`. It means than the latest version of your flag will be the one from the latest file.\\n\\n:::tip example\\nWe have 3 files that contains the flag `my-flag` and there are in this order in the retriever list :\\n1. `flag-s3.yaml`\\n2. `flag-configmap.yaml`\\n3. `flag-github.yaml`\\n\\nThe flag configuration we will use to evaluate your flag will be the one that is in the file `flag-github.yaml`\\n:::\\n\\n\\n## Conclusion\\nWe believe that multiple configuration flags and parallel downloads will make it easier for you to manage your feature flags and provide more flexibility to your development process.\\nWe hope you find these features useful, and we look forward to hearing your feedback!\\n\\nIf you have any questions or comments, please don\'t hesitate to reach out to us. We\'re always happy to help!"},{"id":"/2023/02/20/lint-your-feature-flags","metadata":{"permalink":"/blog/2023/02/20/lint-your-feature-flags","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2023-02-20-lint-your-feature-flags/index.mdx","source":"@site/blog/2023-02-20-lint-your-feature-flags/index.mdx","title":"Lint your feature flag config in you CI/CD pipelines \u274c \u2705","description":"As GO Feature Flag continues to evolve, we\'re excited to announce a new feature that will make it easier for our users to manage their feature flags.","date":"2023-02-20T00:00:00.000Z","tags":[{"inline":true,"label":"GO Feature Flag","permalink":"/blog/tags/go-feature-flag"},{"inline":true,"label":"linter","permalink":"/blog/tags/linter"},{"inline":true,"label":"lint","permalink":"/blog/tags/lint"}],"readingTime":3.7,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"title":"Lint your feature flag config in you CI/CD pipelines \u274c \u2705","authors":["thomaspoignant"],"tags":["GO Feature Flag","linter","lint"]},"unlisted":false,"prevItem":{"title":"Multiple Configuration Flags for GO Feature Flag \ud83d\uddc4\ufe0f","permalink":"/blog/2023/03/17/multiple-config-file"},"nextItem":{"title":"\ud83d\ude80 Announcing GO Feature Flag v1.0.0","permalink":"/blog/2023/02/01/introducing-v1.0.0"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\nimport styles from \'./styles.module.css\';\\n\\n\\nAs **GO Feature Flag** continues to evolve, we\'re excited to announce a new feature that will make it easier for our users to manage their feature flags.\\nWe are introducing the ability to **lint your feature flag configuration**, which will help ensure that your feature flag configurations are correct and **error-free**.\\n\\n![command line output](output.png)\\n\\n\x3c!-- truncate --\x3e\\n\\n## Introducing `go-feature-flag-lint`\\nManaging feature flags can be challenging, especially when it comes to configuring them correctly.\\nWith our new command line [`go-feature-flag-lint`](/docs/tooling/linter), we are providing a tool that helps you avoid making mistakes in your feature flag configuration.\\n\\nTo use the feature flag configuration linting feature, simply run the command line, it will analyze your configuration to ensure that it is free of errors.\\nIf there are any issues, `go-feature-flag-lint` will provide you with a detailed report that identifies the problem to help you to fix it.\\n\\nTo get the maximum benefit from this feature, we recommend integrating it into your **CI/CD pipelines** to catch any issues before they make it to production.\\n\\nThe benefits of using our feature flag configuration linting feature, along with integrating it into your CI/CD pipelines, include:\\n\\n- Ensuring that your feature flag configuration is correct, which will reduce the risk of issues and errors in your application.\\n- Saving time and effort by automating the process of checking your feature flag configuration.\\n\\n## Configure your CI/CD pipelines\\n\\nIntegrating the feature flag configuration linting into your CI/CD pipeline is simple.\\nFirst, you will need to install the `go-feature-flag-lint` CLI tool, which can be used to run the linting process.\\nNext, you can add a new step to your pipeline that runs the `go-feature-flag-lint` CLI tool to lint your feature flag configuration file.\\n\\nIf there are any issues detected, the CLI tool will exit with a non-zero status code, which will cause your pipeline to fail.\\nBy integrating the feature flag configuration linting into your CI/CD pipeline, you can catch any issues with your feature flag configuration before it is deployed to production, reducing the risk of errors and issues.\\n\\nHere\'s some examples of how to integrate the feature flag configuration linting into a CI/CD pipeline for popular CI/CD services:\\n\\n<Tabs groupId=\\"code\\">\\n    <TabItem value=\\"githubaction\\" label=\\"Github Action\\" attributes={{className: styles.github}}>\\n\\n```yaml\\nname: \\"Build\\"\\non:\\n  push:\\n    branches:\\n      - main\\n  pull_request:\\n    types: [ opened, synchronize, reopened ]\\n\\njobs:\\n  Lint:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - name: Checkout repository\\n        uses: actions/checkout@v3\\n\\n      - name: Download go-feature-flag-lint\\n        run: curl -L $(curl -s https://api.github.com/repos/thomaspoignant/go-feature-flag/releases/latest | jq -r \'.assets[] | select(.name|match(\\"Linux_x86_64.tar.gz$\\")) | .browser_download_url\' | grep \'go-feature-flag-lint\') --output release.tar.gz && tar -zxvf release.tar.gz\\n\\n      - name: Run go-feature-flag-lint\\n        run: ./go-feature-flag-lint --input-format=yaml --input-file=flag-config.yaml # please put the right file name\\n```\\n\\n  </TabItem>\\n    <TabItem value=\\"circleci\\" label=\\"CircleCi\\" attributes={{className: styles.circleci}}>\\n\\n```yaml\\nversion: 2.1\\njobs:\\n  build:\\n    docker:\\n     - image: cimg/base:2022.05\\n\\n    steps:\\n      - checkout\\n      - run: curl -L $(curl -s https://api.github.com/repos/thomaspoignant/go-feature-flag/releases/latest | jq -r \'.assets[] | select(.name|match(\\"Linux_x86_64.tar.gz$\\")) | .browser_download_url\' | grep \'go-feature-flag-lint\') --output release.tar.gz && tar -zxvf release.tar.gz\\n      - run: ./go-feature-flag-lint --input-format=yaml --input-file=flag-config.yaml # please put the right file name\\n```\\n\\n  </TabItem>\\n    <TabItem value=\\"gitlab\\" label=\\"Gitlab\\" attributes={{className: styles.gitlab}}>\\n\\n```yaml\\nimage: ubuntu\\nlint-job:\\n  stage: build\\n\\n  before_script:\\n    - apt-get -qq update\\n    - apt-get install -y jq curl\\n\\n  script:\\n    - curl -L $(curl -s https://api.github.com/repos/thomaspoignant/go-feature-flag/releases/latest | jq -r \'.assets[] | select(.name|match(\\"Linux_x86_64.tar.gz$\\")) | .browser_download_url\' | grep \'go-feature-flag-lint\') --output release.tar.gz && tar -zxvf release.tar.gz\\n    - ./go-feature-flag-lint --input-format=yaml --input-file=flag-config.yaml # please put the right file name\\n```\\n\\n  </TabItem>\\n\\n</Tabs>\\n\\n\\n## Conclusion\\n\\nWe are thrilled to be introducing this new feature, which we believe will make a significant difference in how our users manage their feature flags. With the introduction of feature flag configuration linting, we are providing a tool that will make it easier for you to manage your feature flags and get the most out of GO Feature Flag.\\n\\nIf you have any questions about this feature or would like more information, please don\'t hesitate to get in touch with our support team. We\'re always here to help!"},{"id":"/2023/02/01/introducing-v1.0.0","metadata":{"permalink":"/blog/2023/02/01/introducing-v1.0.0","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2023-02-01-introducing-v1.0.0/index.md","source":"@site/blog/2023-02-01-introducing-v1.0.0/index.md","title":"\ud83d\ude80 Announcing GO Feature Flag v1.0.0","description":"GO Feature Flag logo","date":"2023-02-01T00:00:00.000Z","tags":[{"inline":true,"label":"GO Feature Flag","permalink":"/blog/tags/go-feature-flag"},{"inline":true,"label":"Open Feature","permalink":"/blog/tags/open-feature"},{"inline":true,"label":"release","permalink":"/blog/tags/release"}],"readingTime":5.03,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"title":"\ud83d\ude80 Announcing GO Feature Flag v1.0.0","authors":["thomaspoignant"],"tags":["GO Feature Flag","Open Feature","release"]},"unlisted":false,"prevItem":{"title":"Lint your feature flag config in you CI/CD pipelines \u274c \u2705","permalink":"/blog/2023/02/20/lint-your-feature-flags"},"nextItem":{"title":"\ud83d\udd0a Feature Flags in Dev\u2019Obs Podcast \ud83c\uddeb\ud83c\uddf7","permalink":"/blog/2022/07/01/feature-flags-devobs-podcast"}},"content":"![GO Feature Flag logo](banner.png)\\n\\n# \ud83d\ude80 Announcing GO Feature Flag v1.0.0, get more from your feature flags\\n\\nWe are so happy to finally announce that **GO Feature Flag** v1.0.0 is released. \ud83c\udf89 \ud83e\udd73 \ud83d\ude80\\n\\nIt was a long journey before this release but we are happy to propose you an even better experience with feature flags always keeping simplicity in mind and building a lightweight solution.\\n\\nOur goal is still the same, we want you to experience the world of feature flags with a lightweight self-hosted solution.\\n\\nWith this new version you will now be able to enhance your usage of feature flagging with opening the creation of more complex and more advance toggles.\\n\x3c!-- truncate --\x3e\\n\\n# What is changing?\\n\\n## Flag configuration format\\n\\nThe main change is the format of your flags configuration. \\n\\nAfter using the version `v0.x.x` for quite some time we notice some limitation on the way our flag configuration was designed.\\nIt was hard to return more than 2 different values with the same flag and we wanted to find a better way to represent our flags to be more extensible.\\n\\nThe new representation of the flag is a bit more verbose but allows a lot more possibility in the long term, being able to create more advanced flag.\\n\\n**Old format:**\\n\\nIn the previous versions the flag representation was looking like this:\\n\\n```yaml\\ntest-flag:\\n  rule: key eq \\"random-key\\"\\n  percentage: 40\\n  true: true\\n  false: false\\n  default: false\\n```\\n\\nAs you can see on this example you can only have a value for the `true` variation and for the `false` variation, the `default`variation was applying if the user was not part of the `rule`.\\n\\n**New format:**\\n\\nThe same flag in the new format will looks like this:\\n\\n```yaml\\ntest-flag:\\n  variations:\\n    variation_A: true\\n    variation_B: false\\n  targeting:\\n    - query: key eq \\"random-key\\"\\n      percentage:\\n        variation_B: 60\\n        variation_A: 40\\n  defaultRule:\\n    variation: variation_B\\n```\\n\\nWith the new format you have an unlimited number of variation possible you can define but also more than one rule for a specific flag.\\n\\nIt allows to target different types of users with different values for the same feature flag.\\n\\nLet\u2019s take a real life example, we want to get the background color for our website based on this criterias:\\n\\n- `pro` users should have a red background\\n- `enterprise` users should have a green background\\n- **40%** of the `free` users should have a **grey** background and **60%** a **yellow** background\\n- **other types** of user have a white background\\n\\nWe can come-up with a flag, the configuration will look like this:\\n\\n```yaml\\nuser-background-color:\\n  variations:\\n    pro: #ff1f00\\n    enterprise: #114f03\\n    free_grey: #b0b3af\\n    free_yellow: #ecec0a\\n    default: #ffffff\\n  targeting:\\n    - query: type eq \\"pro\\"\\n      variation: pro\\n    - query: type eq \\"enterprise\\"\\n      variation: enterprise\\n    - query: type eq \\"free\\"\\n      percentage:\\n        free_grey: 40\\n        free_yellow: 60\\n  defaultRule:\\n    variation: default\\n```\\n\\nAs you can see we can have a way more advanced flag configuration with this new format. This format is solving all the limitation we had with the version `v0.x.x` of **GO Feature Flag**.\\n\\n### Migrate from v0.x.x to v1.x.x\\n\\nFirst of all you should know that all flags from the version `v0.x.x` are still compatible with this new version of **GO Feature Flag**. We made it possible to reduce the disagreement to have to convert all your flag directly.\\n\\n**BUT** we encourage you to migrate your flag to the new version and for this we have created a tool called `go-feature-flag-migration-cli` to convert flags in `v0.x.x` format to `v1.0.0` format.\\n\\nThe easiest way to use it is probably to use our docker image like this:\\n\\n```bash\\ndocker run \\\\\\n  -v $(pwd)/your/configuration_folder:/config \\\\\\n  thomaspoignant/go-feature-flag-migration-cli:latest \\\\\\n  --input-format=yaml \\\\\\n  --input-file=/config/my-go-feature-flag-config-v0.x.x.yaml \\\\\\n  --output-format=yaml \\\\\\n  --output-file=/config/my-go-feature-flag-config-v1.x.x.yaml\\n```\\n\\n## Documentation\\n\\nWe use the opportunity of the `v1.0.0` to revamp our documentation and to highlight how you can use **GO Feature Flag** in 2 different modes.\\n\\n- **The GO module**, this is where we started and this is the core of what we propose. In the documentation you will find all the information on how to use the module into your GO project.\\n- Using **Open-Feature**, the new open-source vendor agnostic standard for feature flags. You can use the `relay-proxy` our server component that allows to use **GO Feature Flag** with multiple languages *(for now we support `javascript`, `typescript`, `java`, `GO` and `.Net`)*. In the documentation you will find how to use the **GO Feature Flag providers** in combination with the **Open Feature SDKs**.\\n\\n## Flag Editor\\n\\nOur old flag editor was not compatible anymore with the new `v1.0.0` flag format. \\n\\nSo we decided to restart our flag editor from scratch and to allow the possibility to create flags configuration from a simple UI. \\n\\n![Kapture 2023-01-20 at 16.16.50.gif](flag_editor.gif)\\n\\nFor now it is a tiny UI that make your life easier, but the goal is to evolve it more and more to be the place where you want to go to build your new feature flags.\\n\\n# What has not changed?\\n\\nYes a lot of things have changed but our internals are solids and we have ensure to be consistent with the previous versions.\\n\\nOur main points of attention where the following:\\n\\n- User segmentation is similar between `v0.x.x` and `v1.0.0` meaning that if a user was affected by a flag (in a percentage for example) he will continue to be in the same cohort.\\n- All `retrievers` and data `exporters` have not changed and are still working exactly the same way as before.\\n- You can continue using **GO Feature Flags** with your old flags.\\n- Moving to the version `v1.0.0` is transparent and you just have to change the version.\\n- You can still use our advance rollout capabilities such as **experimentation**, **scheduled rollout**, **progressive rollout \u2026**\\n\\n# Feedback\\n\\nFeedbacks is our only way to evolve GO Feature Flag, so please contact us to give us any feedback.\\n\\n- Via [email](mailto:contact@gofeaturegflag.org)\\n- Via a [GitHub Issue](https://github.com/thomaspoignant/go-feature-flag/issues/new/choose)"},{"id":"/2022/07/01/feature-flags-devobs-podcast","metadata":{"permalink":"/blog/2022/07/01/feature-flags-devobs-podcast","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2022-07-01-feature-flags-devobs-podcast/index.md","source":"@site/blog/2022-07-01-feature-flags-devobs-podcast/index.md","title":"\ud83d\udd0a Feature Flags in Dev\u2019Obs Podcast \ud83c\uddeb\ud83c\uddf7","description":"Earlier this week the super cool podcast Dev\u2019Obs asked me to talk about feature flags, go-feature-flag and also the super nice initiative OpenFeature.","date":"2022-07-01T00:00:00.000Z","tags":[{"inline":true,"label":"GO Feature Flag","permalink":"/blog/tags/go-feature-flag"},{"inline":true,"label":"Openfeature","permalink":"/blog/tags/openfeature"},{"inline":true,"label":"Podcast","permalink":"/blog/tags/podcast"}],"readingTime":0.4,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"title":"\ud83d\udd0a Feature Flags in Dev\u2019Obs Podcast \ud83c\uddeb\ud83c\uddf7","authors":["thomaspoignant"],"tags":["GO Feature Flag","Openfeature","Podcast"]},"unlisted":false,"prevItem":{"title":"\ud83d\ude80 Announcing GO Feature Flag v1.0.0","permalink":"/blog/2023/02/01/introducing-v1.0.0"},"nextItem":{"title":"Automate Your Product Release Cycles Using Go Feature Flag","permalink":"/blog/automate-your-product-release-cycles-using-go-feature-flag"}},"content":"![](./devobs.jpg)\\n\\nEarlier this week the super cool podcast Dev\u2019Obs asked me to talk about feature flags, go-feature-flag and also the super nice initiative OpenFeature.\\n\\nThe podcast is in French \ud83c\uddeb\ud83c\uddf7 (yes I know sorry\u2026) but you can learn a lot of cool things, when to use them, what is OpenFeature about and all the cool things that the feature flags can bring to your developer experience.\\n\\nListen it here: https://www.listennotes.com/podcasts/devobs/devobs-24-feature-flags-rknRoFGL7N5/\\n\\n\x3c!-- truncate --\x3e"},{"id":"automate-your-product-release-cycles-using-go-feature-flag","metadata":{"permalink":"/blog/automate-your-product-release-cycles-using-go-feature-flag","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2021-05-26-Automate-Your-Product-Release-Cycles-Using-Go-Feature-Flag/index.md","source":"@site/blog/2021-05-26-Automate-Your-Product-Release-Cycles-Using-Go-Feature-Flag/index.md","title":"Automate Your Product Release Cycles Using Go Feature Flag","description":"When you build a new feature, orchestrating the actual launch schedule between the Product, Engineering, and Marketing","date":"2021-05-26T00:00:00.000Z","tags":[{"inline":true,"label":"GO Feature Flag","permalink":"/blog/tags/go-feature-flag"},{"inline":true,"label":"v0.x.x","permalink":"/blog/tags/v-0-x-x"}],"readingTime":4.82,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"slug":"automate-your-product-release-cycles-using-go-feature-flag","title":"Automate Your Product Release Cycles Using Go Feature Flag","authors":["thomaspoignant"],"tags":["GO Feature Flag","v0.x.x"]},"unlisted":false,"prevItem":{"title":"\ud83d\udd0a Feature Flags in Dev\u2019Obs Podcast \ud83c\uddeb\ud83c\uddf7","permalink":"/blog/2022/07/01/feature-flags-devobs-podcast"},"nextItem":{"title":"Introduction blog post","permalink":"/blog/introduction-blog-post"}},"content":"![](./head.jpg)\\n\\nWhen you build a new feature, orchestrating the actual launch schedule between the Product, Engineering, and Marketing\\nteams can be challenging.\\n\\nWhile it seems easy to launch something new, a poorly executed rollout can end up being your worst nightmare.\\n\\nIn this article, I will present to you how to use the Go module go-feature-flag to roll out your new features smoothly\\nand help you be confident during the rollout phase. If you are not familiar with the concept of feature flags or feature\\ntoggles, I encourage you to read\\nthis [article by Martin Fowler](https://www.martinfowler.com/articles/feature-toggles.html).\\n\\ngo-feature-flag is a Go module to easily manage your flags. You can refer to this article I wrote a few months ago to\\nunderstand how it works.\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\n## How To Use go-feature-flag\\n\\nThe library is super simple to use:\\n\\n1. Install the module:\\n\\n```go\\ngo get github.com/thomaspoignant/go -feature-flag\\n```\\n\\n2. Init the client with the location of your configuration file for your flags:\\n\\n```go\\nerr := ffclient.Init(ffclient.Config{\\nPollInterval: 60,\\nRetriever: &ffclient.HTTPRetriever{\\nURL:    \\"http://example.com/flag-config.yaml\\",\\n},\\n})\\ndefer ffclient.Close()\\n```\\n\\n3. Put your new features conditionally based on the flag value:\\n\\n```go\\nuser := ffcontext.NewEvaluationContext(\\"user-unique-key\\")\\nhasFlag, _ := ffclient.BoolVariation(\\"test-flag\\", user, false)\\nif hasFlag {\\n// flag \\"test-flag\\" is true for the user\\n} else {\\n// flag \\"test-flag\\" is false for the user\\n}\\n```\\n\\nYou can have way more configuration, but I\u2019ll let you check\\nthe [documentation](https://docs.gofeatureflag.org) for that.\\n\\n---\\n\\n## Progressive Rollout\\n\\nWhen you release a new feature that can have a strong impact on your system, you probably don\u2019t want to go all-in with\\nthis new feature for all your users.\\n\\nFor example, you are deploying something that can be CPU-consuming and you want to have time to check if your servers\\nhandle it correctly. This is typically a great use case for a progressive rollout.\\n\\nIt progressively increases how many users are impacted by your feature flag to avoid a big-bang rollout for all your\\nusers at once. During that time, it allows you to monitor your system and be confident that your infrastructure can\\nhandle this new load.\\n\\n:::warning\\nThe flag format bellow is the legacy format of GO Feature Flag.\\nRefer to the [documentation](/docs/configure_flag/create-flags) for the latest format.\\n:::\\n\\n```yaml\\nprogressive-flag:\\n  true: true\\n  false: false\\n  default: false\\n  rollout:\\n    progressive:\\n      percentage:\\n        initial: 0\\n        end: 100\\n      releaseRamp:\\n        start: 2021-03-20T00:00:00.10-05:00\\n        end: 2021-03-21T00:00:00.10-05:00\\n```\\n\\nTo do that in go-feature-flag, you will configure your flag like in the example above. You set up a progressive rollout\\nwith an initial percentage value and a release ramp. Over time, more and more users can be affected by the flag and will\\nhave the new feature.\\n\\nDepending on how critical this feature is, you can have a long or a short release ramp. If something goes wrong, you can\\nedit your flag to stop the rollout at any time.\\n\\n---\\n\\n## Scheduling Workflows\\n\\nScheduling introduces the ability for users to change their flags for future points in time. While this sounds\\ndeceptively straightforward, it unlocks the potential for users to create complex release strategies by scheduling the\\nincremental steps in advance.\\n\\nFor example, you may want to turn a feature on for internal testing tomorrow and then enable it for your \u201cbeta\u201d user\\nsegment four days later.\\n\\n```yaml\\nscheduled-flag:\\n  true: true\\n  false: false\\n  default: false\\n  percentage: 0\\n  rollout:\\n    scheduled:\\n      steps:\\n        - date: 2020-04-10T00:00:00.00+02:00\\n          rule: internal eq true\\n          percentage:\\n            100        - date: 2020-04-14T00:00:00.00+02:00\\n          rule:\\n            internal eq true and beta eq true        - date: 2020-04-18T00:00:00.00+02:00\\n          rule: \\"\\"\\n```\\n\\nIn this example, you can see that we are updating the flag multiple times to perform actions in the future. Let\u2019s detail\\nwhat will happen in this configuration:\\n\\n1. Before `2020\u201304\u201310`, the flag is not served.\\n2. After the first update of the flag (`2020\u201304\u201310`), we have 100% of the internal users who received the flag as true.\\n3. Four days later, we add the users who have a `bet`a flag as `true`.\\n4. Finally, four days later, we open the feature to all users.\\n\\nAs you can see, this is really powerful because your release management is now ready without doing any manual\\ndeployment/action, and this scheduling can be done by a non-technical user (aka your product manager).\\n\\n---\\n\\n## Experimentation Rollout\\n\\nSometimes you also want to experiment, collect the data, and decide later if you want to roll out the feature to all\\nyour users.\\n\\nTo do that correctly, you can configure your flag with a start date and an end date for a subset of your users.\\n\\n```yaml\\nexperimentation-flag:\\n  percentage: 50\\n  true: true\\n  false: false\\n  default: false\\n  rule: userId sw \\"9\\"\\n  rollout:\\n    experimentation:\\n      start: 2021-03-20T00:00:00.10-05:00\\n      end: 2021-03-21T00:00:00.10-05:00\\n```\\n\\nIn this example, 50% of your users with a userId that starts with 9 will be impacted by the flag between the start and\\nthe end dates of the experimentation.\\n\\nWith the module, you can also collect the data of your variation (see\\nthe [documentation](https://docs.gofeatureflag.org/) for more info) to join them with\\nthe data of what you are testing.\\n\\nSo you can see the results of your experimentation and decide whether you want to roll out this flag for real or not.\\n\\n---\\n\\n## Conclusion\\n\\nUsing feature flags really is a great thing, but it becomes even better if you use some advanced rollout strategies.\\n\\nIf you start using them, you will love it because you decouple the deployment and the release and you can have\\nfine-grained control over what your users can do."},{"id":"introduction-blog-post","metadata":{"permalink":"/blog/introduction-blog-post","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2021-01-11-introduction-blog-post/index.md","source":"@site/blog/2021-01-11-introduction-blog-post/index.md","title":"Introduction blog post","description":"I absolutely don\u2019t think human/manual QA gates should be involved in between the writing of code and its being live. To avoid breaking things every time and to have an early cutoff system, you should use feature flags.","date":"2021-01-11T00:00:00.000Z","tags":[{"inline":true,"label":"GO Feature Flag","permalink":"/blog/tags/go-feature-flag"},{"inline":true,"label":"v0.x.x","permalink":"/blog/tags/v-0-x-x"}],"readingTime":4.39,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant","page":null}],"frontMatter":{"slug":"introduction-blog-post","title":"Introduction blog post","authors":["thomaspoignant"],"tags":["GO Feature Flag","v0.x.x"]},"unlisted":false,"prevItem":{"title":"Automate Your Product Release Cycles Using Go Feature Flag","permalink":"/blog/automate-your-product-release-cycles-using-go-feature-flag"}},"content":"<center>\\n\\n  ![](./logo.png)\\n  \\n</center>\\n\\nI absolutely don\u2019t think human/manual QA gates should be involved in between the writing of code and its being live. To avoid breaking things every time and to have an early cutoff system, you should use feature flags.\\n\\nThere are a lot of systems available on the market to manage your flags, like [LaunchDarkly](https://launchdarkly.com/) or [UNLEASH](https://unleash.org/), that have Golang support \u2014 but this option is expensive, and you have to host a server somewhere to manage your flags.\\n\\nFrom this starting point, I came up with the idea to create a simple library with only one file in the back end. This file can be stored in different places (AWS S3, GitHub, an HTTP endpoint somewhere, etc.). This is the only thing you have to host \u2014 all the decision logic stands inside the Go module.\\n\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\n## Why a new solution?\\n\\nThere are some solutions available for Go to manage feature flags. I can classify them into two categories:\\n\\n- You need to run a specific service: [markphelps/flipt](https://github.com/markphelps/flipt), [checkr/flagr](https://github.com/checkr/flagr), [Unleash/unleash](https://github.com/Unleash/unleash), [vsco/dcdr](https://github.com/vsco/dcdr), etc.\\n- You need to have a database: [xchapter7x/toggle](https://github.com/xchapter7x/toggle), [AntoineAugusti/feature-flags](https://github.com/AntoineAugusti/feature-flags), etc.\\n\\nAll of these solutions are great and have a lot of features, but I was a bit worried about having a full setup with things to install before doing feature flags on a basic service.\\n\\nI don\u2019t want to host/maintain/monitor a full feature-flag system if my needs are really small.\\n\\nSo I decided to make go-feature-flag, a simple and easy-to-implement feature-flag system, with no back end at all except a shared configuration file you can store anywhere (S3, GitHub, HTTP endpoint, etc.).\\n\\nThe goal is to experience the usage of feature flags without a complex solution, and if you end up liking it and need a more advanced pattern, you can go to any open-source solution or SaaS solution \u2014 like LaunchDarkly, for example.\\n\\n--- \\n\\n## How Does It Work?\\n\\nHow this Go module works is easy. It just reads the shared file every x seconds and gives you a way to get the value of your flag in the type you expect.\\n\\n![](./sdk-explanation.jpg)\\n\\nAs you can see, what go-feature-flag is providing is a way for you to keep in sync with the feature-flag config file. It also allows you to evaluate the flag for your users.\\n\\nA rule system based on [nikunjy/rules](https://github.com/nikunjy/rules) allows you to specify complex rules to apply the flag only for a subset of your users.\\n\\nThe percentage allows you to select which percentage of users will get the true value, but I\u2019m sure you wonder how the repartition is done. It\u2019s really easy \u2014 we\u2019re doing a hash of the key of the user with the flag name used as a salt (it guarantees that the repartition isn\u2019t always to the same users).\\n\\n![](./code.png)\\n\\n---\\n\\n## How to Use It\\n\\nThe main goal of go-feature-flag is to be super simple so you don\u2019t have much to do in order to use it.\\n\\n- The first thing to do is host your config file somewhere (S3, GitHub, etc.)\\n- During app initialization, init go-feature-flag with a configuration:\\n\\n```go\\nerr := ffclient.Init(ffclient.Config{\\n    PollInterval: 3,\\n    Retriever: &ffClient.HTTPRetriever{\\n        URL:    \\"https://raw.githubusercontent.com/thomaspoignant/go-feature-flag/main/testdata/test.yaml\\",\\n    },\\n})\\ndefer ffclient.Close()\\n```\\n\\n- Now that you\u2019ve done an init on go-feature-flag, you can see the value of the flag for your users, with something like this:\\n\\n```go\\nuser := ffcontext.NewEvaluationContext(\\"user-unique-key\\")\\nhasFlag, _ := ffclient.BoolVariation(\\"test-flag\\", user, false)\\nif hasFlag {\\n    // flag \\"test-flag\\" is true for the user\\n} else {\\n    // flag \\"test-flag\\" is false for the user\\n}\\n```\\n\\n**Note**: Your variation will return the default value (the last parameter) if you have an error (flag not present, wrong type, etc.).\\n\\n- It\u2019s a basic example, but you can put as many properties as you want for your User to make complex queries on your flag\\n\\n```go\\nuser = ffcontext.NewEvaluationContextBuilder(\\"user-unique-key\\").\\n AddCustom(\\"firstname\\", \\"John\\").\\n AddCustom(\\"lastname\\", \\"Doe\\").\\n AddCustom(\\"email\\", \\"john.doe@example.com\\").\\n Build()\\n```\\n\\nThis allows you to have a rule like `email eq \\"john.doe@example.com\\"` to select a specific user with your flag.\\n\\n--- \\n\\n## What\u2019s Next?\\nAs you can see go-feature-flag is simple, and the goal is to keep it as simple as possible. But this doesn\u2019t mean it\u2019s finished.\\n\\nFor now, I see an evolutionary path for go-feature-flag: First, it should be able to store the flag config file anywhere, so we have to support more retrievers. The second thing is to get more feedback. For now, we\u2019re logging some stuff, but maybe some users would like to have a webhook or Slack notification.\\n\\ngo-feature-flag is also open to contribution, so if you want to contribute any ideas or help, I\u2019d really love to hear from you concerning what you think about this library and what you want in it.\\n\\nSo feel free to write [a discussion](https://github.com/thomaspoignant/go-feature-flag/discussions) on GitHub, open an [issue](https://github.com/thomaspoignant/go-feature-flag/issues), or send me an [email](mailto:contact@gofeatureflag.org)."}]}}')}}]);